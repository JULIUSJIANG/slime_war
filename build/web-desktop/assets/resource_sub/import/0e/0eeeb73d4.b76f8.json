[1,["fbCYTJf+JDsa98p4Fgcx95"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,3],[1,0,1,2,4]],[[[[0,"eff_alchemy_point_mat",{"0":{"defines":{}}}]],0,0,[0],[0],[0]],[[[1,"eff_alchemy_point",[{"hash":1958876443,"record":null,"name":"eff_alchemy_point|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec2 vecRel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (dot (vecRel, vecRel));\n  float rate = clamp (1.0 - (distance / 0.5), 0.0, 1.0);\n  vec4 colorTex = texture (texture, v_uv0);\n  float opacityForRadius = pow (rate, 2.0);\n  colorTex *= vec4 (opacityForRadius, opacityForRadius, opacityForRadius, 0.0);\n  colorTex *= v_color;\n  gl_FragColor = colorTex;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec2 vecRel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (dot (vecRel, vecRel));\n  float rate = clamp (1.0 - (distance / 0.5), 0.0, 1.0);\n  vec4 colorTex = texture2D(texture, v_uv0);\n  float opacityForRadius = pow (rate, 2.0);\n  colorTex *= vec4 (opacityForRadius, opacityForRadius, opacityForRadius, 0.0);\n  colorTex *= v_color;\n  gl_FragColor = colorTex;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"eff_alchemy_point|vs|fs","blendState":{"targets":[{"blend":true},{"blendEq":"max"},{"blendAlphaEq":"max"}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]