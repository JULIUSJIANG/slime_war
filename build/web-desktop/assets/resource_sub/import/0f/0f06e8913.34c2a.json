[1,["ecpdLyjvZBwrvm+cedCcQy","a2MjXRFdtLlYQ5ouAFv/+R","02ehvYJpVCf73TNNMkQnM2","14dIKnQqZNCLrs3AFl0LW2","48i7rozcNL363xD56zz+tt","07KL+Jp85DpJ1/ZJpGM7Su","4e4um3wCpCA5uEAR2XIp5t","a4yIzfwJJG/YoQiEY2ZwyR","73mXtD2yVDvYVv0WY7+94Z","75l2Gh205LyLGBsBwsByst","1f19N5PHhLkYZXhv5+3qw1","3bKjPCUY1DNJmIz5DWPfMr","e8tlH1Ii1HLbXVI8Oe+XaR","93EuvHh+ZG/Lzb6iR36S5r","b1+RqoU05IuYDlX4ZbS2wJ","63pBbGY99LxYrxLMeeH56U"],["node","_spriteFrame","_parent","_effectAsset","_textureSetter","root","nodeTips","containerBossBoard","nodeMp","nodeFlashDmged","nodeReadyKeep","nodeReadyFlash","sprMask","nodeBarMpMark","txtMpCount","nodeBarMp","txtHpCount","nodeBarHp","nodeHp","txtLevel","containerEquipmentList","cameraBoard","cameraEffOffsetSub","cameraEffOffsetAdd","cameraEffLight","cameraBodyElement","cameraBloom","cameraEffTrace","cameraBodyEnv","btnForward","sprScreen","nodeMark","btnAim","btnOptions","containerTxt","containerBoard","containerBuff","graphics","containerEff","containerLight","containerPart","containerSnow","containerRain","containerReward","containerNpc","containerTrace","containerBg","data","_defaultClip"],[["cc.Node",["_name","_groupIndex","_opacity","_active","_prefab","_parent","_contentSize","_components","_trs","_children","_color","_anchorPoint"],-1,4,1,5,9,7,2,5,5],["cc.Widget",["_alignFlags","_right","_left","_top","_bottom","_originalWidth","_originalHeight","alignMode","node"],-5,1],["cc.Node",["_name","_opacity","_active","_components","_prefab","_contentSize","_trs","_parent","_anchorPoint","_children","_color"],0,12,4,5,7,1,5,2,5],["cc.Sprite",["_sizeMode","_type","_srcBlendFactor","_dstBlendFactor","_isTrimmedMode","_fillType","_fillRange","node","_materials","_spriteFrame"],-4,1,3,6],["cc.Node",["_name","_groupIndex","_opacity","_parent","_components","_prefab","_trs","_color","_contentSize"],0,1,2,4,7,5,5],["cc.Layout",["_resize","_N$layoutType","_N$spacingX","_N$spacingY","_N$paddingLeft","node","_layoutSize"],-2,1,5],"cc.SpriteFrame",["cc.Node",["_name","_groupIndex","_children","_components","_prefab","_trs","_parent","_contentSize","_anchorPoint"],1,12,9,4,7,1,5,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Button",["_N$transition","zoomScale","node"],1,1],["cc.LabelOutline",["_width","node","_color"],2,1,5],["cc.Camera",["_cullingMask","_clearFlags","_zoomRatio","_nearClip","node","_backgroundColor"],-1,1,5],["cc.Material",["_name","_techniqueData"],1],["cc.AnimationClip",["_name","_duration","curveData"],0],["cc.Prefab",["_name"],2],["a46a97NLGRCxKcNJGmJBNAq",["node","containerBg","containerTrace","containerNpc","containerReward","containerRain","containerSnow","containerPart","containerLight","containerEff","graphics","containerBuff","containerBoard","containerTxt","btnOptions","btnAim","nodeMark","sprScreen","btnForward","cameraBodyEnv","cameraEffTrace","cameraBloom","cameraBodyElement","cameraEffLight","cameraEffOffsetAdd","cameraEffOffsetSub","cameraBoard","containerEquipmentList","txtLevel","nodeHp","nodeBarHp","txtHpCount","nodeBarMp","txtMpCount","nodeBarMpMark","sprMask","listNodeOpacitySkill","nodeReadyFlash","nodeReadyKeep","nodeFlashDmged","nodeMp","containerBossBoard","nodeTips"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1],["cc.Label",["_string","_fontSize","_lineHeight","_styleFlags","_N$horizontalAlign","_N$verticalAlign","node","_materials"],-3,1,3],["cc.Animation",["node","_clips","_defaultClip"],3,1,3,6],["21190CtPf1A/4eJxOmeR/iV",["node"],3,1],["cc.Mask",["node","_materials"],3,1,3],["cc.Graphics",["node","_materials"],3,1,3],["13b03wcJfhIz7oowVY52rFx",["node"],3,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[8,0,1,2,2],[0,0,1,5,4,3],[3,0,7,8,9,2],[4,0,3,4,5,6,2],[1,0,8,2],[1,0,5,6,8,4],[16,0,1,2,3,4,5,6,7,7],[11,0,1,2,3,4,5,5],[3,1,0,7,8,9,3],[0,0,5,9,7,4,6,11,8,2],[0,0,5,7,4,6,8,2],[0,0,5,9,7,4,6,8,2],[10,0,1,2,2],[21,0,1],[12,0,1,3],[0,0,5,4,6,8,2],[0,0,5,9,7,4,6,2],[0,0,5,9,7,4,6,11,2],[0,0,2,5,7,4,10,6,3],[0,0,5,7,4,10,6,11,8,2],[0,0,5,7,4,10,6,2],[0,0,5,7,4,10,6,8,2],[2,0,7,3,4,5,8,6,2],[1,0,2,1,5,8,5],[1,0,4,8,3],[1,0,1,8,3],[19,0,1,1],[11,0,1,2,3,4,5],[22,0,1,2,4],[13,0,1,2,4],[14,0,2],[0,0,9,7,4,6,8,2],[0,0,5,9,4,2],[0,0,5,9,7,4,10,6,2],[0,0,2,1,5,7,4,10,6,8,4],[0,0,5,7,4,6,11,8,2],[0,0,3,5,7,4,10,6,8,3],[0,0,9,7,4,6,11,8,2],[0,0,5,9,7,4,10,6,11,2],[0,0,5,9,7,4,11,8,2],[0,0,5,7,4,6,2],[0,0,1,5,9,4,3],[0,0,5,9,4,6,8,2],[7,0,1,6,2,3,4,5,3],[7,0,2,3,4,7,8,5,2],[2,0,9,3,4,10,5,6,2],[2,0,7,3,4,5,6,2],[2,0,1,7,3,4,5,8,6,3],[2,0,7,9,3,4,5,8,2],[2,0,2,7,3,4,5,6,3],[4,0,1,3,4,5,3],[4,0,2,3,4,5,7,8,6,3],[1,0,2,1,3,8,5],[1,0,1,3,4,8,5],[1,0,2,1,3,5,6,8,7],[1,0,6,8,3],[1,7,0,4,5,8,5],[1,0,1,3,8,4],[1,0,2,1,4,8,5],[1,7,0,2,1,3,4,5,6,8,9],[15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,1],[8,1,2,1],[9,1,0,2,3],[9,0,2,2],[3,2,3,0,7,8,4],[3,2,3,0,4,7,8,5],[3,1,0,5,6,7,8,5],[5,0,1,3,5,6,4],[5,0,1,2,5,6,4],[5,0,1,4,2,5,6,5],[10,1,2,1],[17,0,1,2,1],[18,0,1],[20,0,1,1]],[[[[14,"eff_screen_mat",{"0":{"props":{},"defines":{}}}]],0,0,[0],[3],[7]],[[{"name":"bar","rect":[0,0,202,32],"offset":[0,0],"originalSize":[202,32],"capInsets":[0,0,0,0]}],[6],0,[0],[4],[8]],[[[29,"game_play_view",3.6666666666666665,{"paths":{"mask":{"props":{"opacity":[{"frame":0,"value":255},{"frame":0.3333333333333333,"value":0}]}},"txt_level":{"props":{"x":[{"frame":0,"value":1000},{"frame":0.3333333333333333,"value":0},{"frame":3.3333333333333335,"value":0},{"frame":3.6666666666666665,"value":-1000}]}}}}]],0,0,[],[],[]],[[[30,"game_play_view"],[31,"game_play_view",[-47,-48,-49,-50,-51,-52],[[4,45,-2],[60,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,[-9,-10],-8,-7,-6,-5,-4,-3]],[61,-1,0],[5,1136,640],[568,320,0,0,0,0,1,1,1,1]],[43,"scene",1,1,[[-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,[1,"eff",1,-70,[0,"a9W4Yr5YpFUY0vHh6iPZJe",1,0]],[1,"eff",1,-71,[0,"22f9Wxu2NI6o690V2YwTqR",1,0]]],1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4],[[4,12,-53]],[0,"d3hoU+ozpKe5WO81/LReqZ",1,0],[-568,-320,0,0,0,0,1,1,1,1]],[32,"container_camera",2,[-72,-73,-74,-75,-76,-77,-78,-79],[0,"f0p25NLNRNwZw6Ows19rIO",1,0]],[45,"btn_forward",[-83,-84,-85,-86,-87],[[-80,[62,1.02,3,-81],[8,1,0,-82,[36],37]],1,4,4],[0,"90nRh5dVFLwp9cFpg8uoj5",1,0],[4,4278190080],[5,280,100],[0,0,0,0,0,0,1,1,1,0]],[44,"container",[[-90,[15,"space",-91,[0,"2d04uNWw5OiZZrIC1XYjJ8",1,0],[5,40,0],[20,0,0,0,0,0,1,1,1,1]],-92,[15,"space",-93,[0,"70WUNEQvtK8K07WQyvJa+F",1,0],[5,40,0],[262,0,0,0,0,0,1,1,1,1]],-94],1,4,1,4,1],[[67,1,1,20,-88,[5,484,0]],[52,9,20,548,20,-89]],[0,"49LJHSbgRPirbMCu2HG+4n",1,0],[5,484,0],[0,0,1],[-548,300,0,0,0,0,1,1,1,1]],[16,"ui",1,[-96,5,-97,-98],[[4,45,-95]],[0,"04SsLp63xCGrg+p1c6MvtS",1,0],[5,1136,640]],[46,"btn_options",6,[[[53,36,27,19,27.6,-99],[63,3,-100],-101,[6,"暂停",26,26,1,1,1,-102,[6]],[70,-103,[4,4278190080]]],4,4,1,4,4],[0,"679J0sP1tELr6c7c1DJQ7q",1,0],[5,54,34.76],[514,-275.02,0,0,0,0,1,1,1,0]],[16,"container_mask",1,[-107,-108],[[4,45,-104],[71,-105,[46],45],[72,-106]],[0,"95DO045CtCyL2yhxjyLwCB",1,0],[5,1136,640]],[33,"img_bg",4,[-111],[[8,1,0,-109,[24],25],[5,45,100,100,-110]],[0,"2djX0+5vxMmLStck9Wh5dH",1,0],[4,4289920768],[5,280,100]],[11,"bg_txt",9,[-113,-114],[[23,36,85,20,110,-112]],[0,"f6i80qHadIi5YuzMUuIIDd",1,0],[5,60,18],[90,-41,0,0,0,0,1,1,1,1]],[11,"container_tips_bg",4,[-116,-117],[[23,40,25,100,130,-115]],[0,"2c6BXv8zRIQ68vrQh+MDps",1,0],[5,155,47.72],[-37.5,0,0,0,0,0,1,1,1,1]],[34,"flash_dmged",0,5,2,[[2,0,-118,[0],1],[54,45,-125,-1261,-640,100,100,-119]],[0,"22yg6iX9xMhJHFtGxAnY4h",1,0],[4,4278190335],[5,1386,640],[568,320,0,0,0,0,1,1,1,1]],[47,"node_touch",1,1,[[[2,0,-120,[4],5],[5,45,100,100,-121],-122],4,4,1],[0,"a0WNMdrWtE4bte/oLz0Kqm",1,0],[5,1136,640],[0,0,0],[-568,-320,0,0,0,0,1,1,1,1]],[35,"list_equipment",5,[[4,1,-123],[68,1,1,20,-124,[5,0,100]]],[0,"6flxwRbWNIQLwTeh1hMnac",1,0],[5,0,100],[0,0,0.5],[0,-50,0,0,0,0,1,1,1,1]],[9,"container_hp",5,[-126],[[4,1,-125]],[0,"86LzUFk8NDcoLxCH85SmxN",1,0],[5,202,32],[0,0,0.5],[40,-16,0,0,0,0,1,1,1,1]],[17,"hp",15,[-128,-129],[[2,0,-127,[11],12]],[0,"7dMV0F1KpBU5AUAdMAjEZQ",1,0],[5,202,32],[0,0,0.5]],[22,"txt_info_hp",16,[[-130,[12,2,-131,[4,4278190080]],[24,12,-31.72,-132]],1,4,4],[0,"2ekjaV5rVArp5fRxzb1jjY",1,0],[5,104.25,31.72],[0,0,0.5],[0,-31.86,0,0,0,0,1,1,1,1]],[9,"container_mp",5,[-134],[[4,1,-133]],[0,"c418Z1IYhDn6TYf45CQ/vJ",1,0],[5,202,32],[0,0,0.5],[282,-16,0,0,0,0,1,1,1,1]],[17,"mp",18,[-136,-137],[[2,0,-135,[19],20]],[0,"7dWW2+W2lNfp3F7EUkR+8Y",1,0],[5,202,32],[0,0,0.5]],[9,"mask",19,[-139,-140],[[26,-138,[17]]],[0,"4cQzvYTaRG+oYYvwkV4zQz",1,0],[5,174,28],[0,0,0.5],[18,0,0,0,0,0,1,1,1,1]],[36,"mark_cost_need",false,20,[[2,0,-141,[15],16],[55,5,100,-142]],[0,"c8vVu8v85CYaBmOvay3x3j",1,0],[4,4278190080],[5,2,28],[83,0,0,0,0,0,1,1,1,1]],[22,"txt_info_mp",19,[[-143,[12,2,-144,[4,4278190080]],[24,12,-31.72,-145]],1,4,4],[0,"3cVxm02G9OA5jwLj1/BIGu",1,0],[5,153.19,31.72],[0,0,0.5],[0,-31.86,0,0,0,0,1,1,1,1]],[37,"btn_group",[-148],[[69,1,1,20,20,-146,[5,300,140]],[4,4,-147]],[0,"08GzndKbVFDYp2eetTJvSo",1,0],[5,300,140],[0,0,0.5],[0,70,0,0,0,0,1,1,1,1]],[11,"mask",4,[-150,-151],[[25,32,10,-149]],[0,"c1JJmO6zpGgrOV6D9V1fsN",1,0],[5,80,80],[90,0,0,0,0,0,1,1,1,1]],[18,"img_flash",200,4,[[8,1,0,-152,[31],32],[5,45,100,100,-153]],[0,"b8tR8TwcJPgaeSeLnZwCZ4",1,0],[4,4289985279],[5,280,100]],[48,"txt_level",8,[-156],[[-154,[12,2,-155,[4,4281019179]]],1,4],[0,"2by6Hg/TlO5Jvj3NZ2zvrn",1,0],[5,164,44.32],[0,0.5,0]],[38,"line_frame",26,[-159],[[2,0,-157,[42],43],[56,2,44,-8,283.13,-158]],[0,"02Y5c1JNZMxbOZ7o1Pj046",1,0],[4,4281019179],[5,164,8],[0,0.5,1]],[49,"spr_screen",false,1,[[-160,[5,45,40,40,-161]],1,4],[0,"bd8B1je5JBi5IHN7DakMDl",1,0],[5,1136,640],[0,0,0,0,0,0,1,1,-1,1]],[9,"mask",16,[-163],[[26,-162,[9]]],[0,"11vMYMHHhIMZaY3tktHQ9K",1,0],[5,174,28],[0,0,0.5],[18,0,0,0,0,0,1,1,1,1]],[19,"bar",29,[[2,0,-164,[7],8]],[0,"464ITSewpA/YOy29jCCTSK",1,0],[4,4278321073],[5,174,28],[0,0,0.5],[-100,0,0,0,0,0,1,1,1,1]],[19,"bar",20,[[2,0,-165,[13],14]],[0,"bbtjSh8gJOlpy9C3+vqpFE",1,0],[4,4279546877],[5,174,28],[0,0,0.5],[-100,0,0,0,0,0,1,1,1,1]],[39,"container_anchor_bottom_left",6,[23],[[57,45,1136,640,-166]],[0,"cchPXSrR5DQKvigwb7AAiw",1,0],[0,0,0],[-568,-320,0,0,0,0,1,1,1,1]],[40,"bg",10,[[8,1,0,-167,[21],22],[5,45,100,100,-168]],[0,"6b/MSQ205E9aTPJKvMotG+",1,0],[5,60,18]],[10,"icon",24,[[2,0,-169,[28],29]],[0,"78qQsvXdRAOISPsL6Pbxsi",1,0],[5,200,200],[0,0,0,0,0,0,1,1,1,0]],[20,"tips_bg",11,[[8,1,0,-170,[33],34],[5,45,130,47.72,-171]],[0,"b3SoXU3KFADol/0aiDJnq6",1,0],[4,4289920768],[5,155,47.72]],[20,"txt_tips",11,[[6,"格挡就绪!",22,22,1,1,1,-172,[35]],[25,32,29.835,-173]],[0,"5bTnDQkxFP+r8y/DuuK2gM",1,0],[4,4281019179],[5,95.33,27.72]],[10,"container_board_boss",6,[[58,44,320,108,20,-174]],[0,"8dTFC4EyFIU6YCWQNDEgWj",1,0],[5,708,50],[106,-275,0,0,0,0,1,1,1,1]],[18,"mask",0,8,[[2,0,-175,[38],39],[5,45,100,100,-176]],[0,"ad0hwEQ91B1LfAJha+JzNU",1,0],[4,4278190080],[5,1136,640]],[10,"fill",27,[[2,0,-177,[40],41],[59,2,45,2,2,2,2,100,100,-178]],[0,"af+kpqs7BB+JVsz2VyPLbD",1,0],[5,160,4],[0,-4,0,0,0,0,1,1,1,1]],[10,"spr_screen",1,[[64,1,0,0,-179,[47]],[5,45,40,40,-180]],[0,"91kXuX7j5LALgJmhTxqUZn",1,0],[5,1136,640],[0,0,0,0,0,0,1,1,-1,1]],[1,"bg",1,2,[0,"603UpxOmZCDI8LHhk7bpqG",1,0]],[1,"trace",1,2,[0,"05FtnCd45A+6y9HE1n4jkg",1,0]],[1,"npc",1,2,[0,"8b0YgVKMlOeYOWX8pht1QO",1,0]],[1,"reward",1,2,[0,"4d/wSipVFEpZeLKDSaQh8X",1,0]],[1,"rain",1,2,[0,"59kHdr3/NDu6DJoYdZDj5v",1,0]],[1,"snow",1,2,[0,"86rJ4/Za1ArYqIpjvK2pqA",1,0]],[1,"part",1,2,[0,"95Y8CCPX5AWZWQWElNwYXs",1,0]],[1,"light",1,2,[0,"48PLtu3MlPlItuSjYBGeQX",1,0]],[1,"eff",1,2,[0,"cbmWccp5ZME7zzEPIxREGv",1,0]],[50,"graphics",1,2,[-181],[0,"08jA1O5FxN3IzMzqVnv5Hf",1,0]],[73,50,[2]],[1,"buff",1,2,[0,"7bQ7RPh2RAfrtgjVLgzxHc",1,0]],[1,"board",1,2,[0,"8e0wKcz4dIh7L7dvz8Fb6g",1,0]],[1,"txt",1,2,[0,"9fUYzFugdKPYVc6KojuotN",1,0]],[41,"aim",1,2,[-182],[0,"ffK4NMcudLfLKVFOnvxpOr",1,0]],[1,"mark",1,55,[0,"ccAV3MAbpDs4tWjgn/4wv1",1,0]],[3,"camera_body_env",3,[-183],[0,"1eQzQF5ulD5by3TVkBwaZQ",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,32,7,2,0.1,57,[4,0]],[3,"camera_eff_trace",3,[-184],[0,"7eObz6naRDe6FIFXcL7jRU",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,4,7,2,0.1,59,[4,0]],[3,"camera_bloom",3,[-185],[0,"81OXIbeOlDeYiHOxe7+tOs",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,512,7,2,0.1,61,[4,0]],[3,"camera_body_element",3,[-186],[0,"d9++OhvBBKDbJMB03RrZlU",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,2,7,2,0.1,63,[4,0]],[3,"camera_eff_light",3,[-187],[0,"3fbcyzFmtP7LGl7iY0XWWX",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,8,7,2,0.1,65,[4,0]],[3,"camera_eff_offset_add",3,[-188],[0,"37TUj8K3RJw7gHPPxy5e7l",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[27,16,7,2,0.1,67],[3,"camera_eff_offset_sub",3,[-189],[0,"8fopp/KglHb5HnozMwff9k",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[27,64,7,2,0.1,69],[3,"camera_board",3,[-190],[0,"54U+ZTOtNApLQdux3CTtmX",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,256,7,2,0.1,71,[4,0]],[65,1,0,0,false,28,[3]],[13,13],[13,7],[6,"生命: 3 / 3",22,22,1,1,1,17,[10]],[6,"能量: 100 / 100",22,22,1,1,1,22,[18]],[42,"container_btn_forward",23,[4],[0,"6eC9U9anVBV5Gzfja1Nync",1,0],[5,280,100],[160,0,0,0,0,0,1,1,1,1]],[21,"txt_tips",10,[[6,"space",18,14,1,1,1,-191,[23]]],[0,"38/ZHlL4ZLioo0k2KVvBOw",1,0],[4,4281019179],[5,51.04,17.64],[0,2,0,0,0,0,1,1,1,1]],[21,"icon_black",24,[[2,0,-192,[26],27]],[0,"d8QINRrA9B6KVon2HosLYs",1,0],[4,4278190080],[5,200,200],[0,0,0,0,0,0,1,1,1,0]],[51,"img_mask",200,4,[-193],[0,"87adV5NzZNbLt5J+sG20Gh",1,0],[4,4278190080],[5,282,102],[0,0,0,0,0,0,1,1,-1,1]],[66,3,0,1,0.5,81,[30]],[13,4],[6,"鸡哥的愤怒",32,32,1,1,1,26,[44]]],0,[0,5,1,0,0,1,0,6,10,0,7,37,0,8,18,0,9,12,0,10,11,0,11,25,0,-1,9,0,-2,34,0,12,82,0,13,21,0,14,77,0,15,31,0,16,76,0,17,30,0,18,15,0,19,84,0,20,14,0,21,72,0,22,70,0,23,68,0,24,66,0,25,64,0,26,62,0,27,60,0,28,58,0,29,83,0,30,73,0,31,56,0,32,74,0,33,75,0,34,54,0,35,53,0,36,52,0,37,51,0,38,49,0,39,48,0,40,47,0,41,46,0,42,45,0,43,44,0,44,43,0,45,42,0,46,41,0,0,1,0,-1,2,0,-2,28,0,-3,13,0,-4,6,0,-5,8,0,-6,40,0,0,2,0,-1,41,0,-2,12,0,-3,42,0,-4,43,0,-5,44,0,-6,45,0,-7,46,0,-8,47,0,-9,48,0,-10,49,0,-11,50,0,-12,52,0,-13,53,0,-14,54,0,-15,55,0,-16,3,0,2,2,0,2,2,0,-1,57,0,-2,59,0,-3,61,0,-4,63,0,-5,65,0,-6,67,0,-7,69,0,-8,71,0,-1,83,0,0,4,0,0,4,0,-1,9,0,-2,24,0,-3,81,0,-4,25,0,-5,11,0,0,5,0,0,5,0,-1,14,0,2,5,0,-3,15,0,2,5,0,-5,18,0,0,6,0,-1,7,0,-3,32,0,-4,37,0,0,7,0,0,7,0,-3,75,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,-1,38,0,-2,26,0,0,9,0,0,9,0,-1,10,0,0,10,0,-1,33,0,-2,79,0,0,11,0,-1,35,0,-2,36,0,0,12,0,0,12,0,0,13,0,0,13,0,-3,74,0,0,14,0,0,14,0,0,15,0,-1,16,0,0,16,0,-1,29,0,-2,17,0,-1,76,0,0,17,0,0,17,0,0,18,0,-1,19,0,0,19,0,-1,20,0,-2,22,0,0,20,0,-1,31,0,-2,21,0,0,21,0,0,21,0,-1,77,0,0,22,0,0,22,0,0,23,0,0,23,0,-1,78,0,0,24,0,-1,80,0,-2,34,0,0,25,0,0,25,0,-1,84,0,0,26,0,-1,27,0,0,27,0,0,27,0,-1,39,0,-1,73,0,0,28,0,0,29,0,-1,30,0,0,30,0,0,31,0,0,32,0,0,33,0,0,33,0,0,34,0,0,35,0,0,35,0,0,36,0,0,36,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,-1,51,0,-1,56,0,-1,58,0,-1,60,0,-1,62,0,-1,64,0,-1,66,0,-1,68,0,-1,70,0,-1,72,0,0,79,0,0,80,0,-1,82,0,47,1,4,2,78,5,2,6,23,2,32,193],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,82],[-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,48,-1,-1,1,1],[0,1,9,3,0,1,0,0,1,0,0,0,4,0,1,0,10,0,0,0,4,0,2,0,0,2,0,5,0,5,0,11,2,0,2,0,0,2,0,1,0,1,0,1,0,6,6,3,12,13]],[[[14,"eff_aim_tips_mat",{"0":{"defines":{}}}]],0,0,[0],[3],[14]],[[{"name":"wp_round_rect_r_10_w_280_h_100","rect":[0,0,280,100],"offset":[0,0],"originalSize":[280,100],"capInsets":[0,0,0,0]}],[6],0,[0],[4],[15]],[[[28,"eff_screen",[{"hash":2422935535,"record":null,"name":"eff_screen|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D textureBodyEnv;\nuniform sampler2D textureEffBloom0;\nuniform sampler2D textureEffBloom1;\nuniform sampler2D textureEffBloom2;\nuniform sampler2D textureEffBloom3;\nuniform sampler2D textureBodyElement;\nuniform sampler2D textureEffLight;\nuniform sampler2D textureEffOffsetAdd;\nuniform sampler2D textureEffOffsetSub;\nuniform sampler2D textureBoard;\nuniform eff_screen {\n  float screenWidth;\n  float screenHeight;\n};\nvec4 bloomJiangTexture (sampler2D tex, vec2 uv, float posRate) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += texture (tex, uv + vec2 (0, posRate / screenHeight));\n  color += texture (tex, uv + vec2 (posRate / screenWidth, 0));\n  color += texture (tex, uv + vec2 (0, -posRate / screenHeight));\n  color += texture (tex, uv + vec2 (-posRate / screenWidth, posRate / screenHeight));\n  color /= 4.0;\n  return color;\n}\nvec4 bloomJiang (vec2 uv) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += bloomJiangTexture (textureEffBloom1, uv, 2.0);\n  return color;\n}\nvoid main () {\n  vec2 pos = vec2(v_uv0[0], v_uv0[1]);\n  vec4 colorEffOffsetAdd = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetAdd_tmp = texture(textureEffOffsetAdd, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetAdd\n      textureEffOffsetAdd_tmp.a *= texture(textureEffOffsetAdd, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetAdd.rgb *= (textureEffOffsetAdd_tmp.rgb * textureEffOffsetAdd_tmp.rgb);\n    colorEffOffsetAdd.a *= textureEffOffsetAdd_tmp.a;\n  #else\n    colorEffOffsetAdd *= textureEffOffsetAdd_tmp;\n  #endif\n  pos[0] += colorEffOffsetAdd[0] * 255.0 / screenWidth;\n  pos[1] += colorEffOffsetAdd[1] * 255.0 / screenHeight;\n  vec4 colorEffOffsetSub = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetSub_tmp = texture(textureEffOffsetSub, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetSub\n      textureEffOffsetSub_tmp.a *= texture(textureEffOffsetSub, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetSub.rgb *= (textureEffOffsetSub_tmp.rgb * textureEffOffsetSub_tmp.rgb);\n    colorEffOffsetSub.a *= textureEffOffsetSub_tmp.a;\n  #else\n    colorEffOffsetSub *= textureEffOffsetSub_tmp;\n  #endif\n  pos[0] -= colorEffOffsetSub[0] * 255.0 / screenWidth;\n  pos[1] -= colorEffOffsetSub[1] * 255.0 / screenHeight;\n  vec4 colorBodyEnv = vec4(1, 1, 1, 1);\n  vec4 textureBodyEnv_tmp = texture(textureBodyEnv, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyEnv\n      textureBodyEnv_tmp.a *= texture(textureBodyEnv, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyEnv.rgb *= (textureBodyEnv_tmp.rgb * textureBodyEnv_tmp.rgb);\n    colorBodyEnv.a *= textureBodyEnv_tmp.a;\n  #else\n    colorBodyEnv *= textureBodyEnv_tmp;\n  #endif\n  vec4 colorBloom = bloomJiang (pos);\n  vec4 colorBodyElement = vec4(1, 1, 1, 1);\n  vec4 textureBodyElement_tmp = texture(textureBodyElement, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyElement\n      textureBodyElement_tmp.a *= texture(textureBodyElement, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyElement.rgb *= (textureBodyElement_tmp.rgb * textureBodyElement_tmp.rgb);\n    colorBodyElement.a *= textureBodyElement_tmp.a;\n  #else\n    colorBodyElement *= textureBodyElement_tmp;\n  #endif\n  float lightMax = 0.15;\n  vec4 colorLight = vec4(1, 1, 1, 1);\n  vec4 textureEffLight_tmp = texture(textureEffLight, pos);\n  #if CC_USE_ALPHA_ATLAS_textureEffLight\n      textureEffLight_tmp.a *= texture(textureEffLight, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorLight.rgb *= (textureEffLight_tmp.rgb * textureEffLight_tmp.rgb);\n    colorLight.a *= textureEffLight_tmp.a;\n  #else\n    colorLight *= textureEffLight_tmp;\n  #endif\n  float colorLightAvg = (colorLight.r + colorLight.g + colorLight.b) / 3.0;\n  vec4 colorLightFinal = colorLight * step (colorLightAvg, lightMax) + colorLight * lightMax / colorLightAvg * step (lightMax, colorLightAvg);\n  colorLightFinal = max (colorLightFinal, vec4 (0));\n  vec4 colorBoard = vec4 (1, 1, 1, 1);\n  vec4 textureBoard_tmp = texture(textureBoard, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureBoard\n      textureBoard_tmp.a *= texture(textureBoard, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBoard.rgb *= (textureBoard_tmp.rgb * textureBoard_tmp.rgb);\n    colorBoard.a *= textureBoard_tmp.a;\n  #else\n    colorBoard *= textureBoard_tmp;\n  #endif\n  vec4 color = colorBodyEnv;\n  color += colorBloom;\n  color = colorBodyElement + color * (1.0 - colorBodyElement.a);\n  color += colorLightFinal;\n  color = colorBoard + color * (1.0 - colorBoard.a);\n  color *= v_color;\n  gl_FragColor = color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D textureBodyEnv;\nuniform sampler2D textureEffBloom0;\nuniform sampler2D textureEffBloom1;\nuniform sampler2D textureEffBloom2;\nuniform sampler2D textureEffBloom3;\nuniform sampler2D textureBodyElement;\nuniform sampler2D textureEffLight;\nuniform sampler2D textureEffOffsetAdd;\nuniform sampler2D textureEffOffsetSub;\nuniform sampler2D textureBoard;\nuniform float screenWidth;\nuniform float screenHeight;\nvec4 bloomJiangTexture (sampler2D tex, vec2 uv, float posRate) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += texture2D(tex, uv + vec2 (0, posRate / screenHeight));\n  color += texture2D(tex, uv + vec2 (posRate / screenWidth, 0));\n  color += texture2D(tex, uv + vec2 (0, -posRate / screenHeight));\n  color += texture2D(tex, uv + vec2 (-posRate / screenWidth, posRate / screenHeight));\n  color /= 4.0;\n  return color;\n}\nvec4 bloomJiang (vec2 uv) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += bloomJiangTexture (textureEffBloom1, uv, 2.0);\n  return color;\n}\nvoid main () {\n  vec2 pos = vec2(v_uv0[0], v_uv0[1]);\n  vec4 colorEffOffsetAdd = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetAdd_tmp = texture2D(textureEffOffsetAdd, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetAdd\n      textureEffOffsetAdd_tmp.a *= texture2D(textureEffOffsetAdd, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetAdd.rgb *= (textureEffOffsetAdd_tmp.rgb * textureEffOffsetAdd_tmp.rgb);\n    colorEffOffsetAdd.a *= textureEffOffsetAdd_tmp.a;\n  #else\n    colorEffOffsetAdd *= textureEffOffsetAdd_tmp;\n  #endif\n  pos[0] += colorEffOffsetAdd[0] * 255.0 / screenWidth;\n  pos[1] += colorEffOffsetAdd[1] * 255.0 / screenHeight;\n  vec4 colorEffOffsetSub = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetSub_tmp = texture2D(textureEffOffsetSub, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetSub\n      textureEffOffsetSub_tmp.a *= texture2D(textureEffOffsetSub, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetSub.rgb *= (textureEffOffsetSub_tmp.rgb * textureEffOffsetSub_tmp.rgb);\n    colorEffOffsetSub.a *= textureEffOffsetSub_tmp.a;\n  #else\n    colorEffOffsetSub *= textureEffOffsetSub_tmp;\n  #endif\n  pos[0] -= colorEffOffsetSub[0] * 255.0 / screenWidth;\n  pos[1] -= colorEffOffsetSub[1] * 255.0 / screenHeight;\n  vec4 colorBodyEnv = vec4(1, 1, 1, 1);\n  vec4 textureBodyEnv_tmp = texture2D(textureBodyEnv, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyEnv\n      textureBodyEnv_tmp.a *= texture2D(textureBodyEnv, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyEnv.rgb *= (textureBodyEnv_tmp.rgb * textureBodyEnv_tmp.rgb);\n    colorBodyEnv.a *= textureBodyEnv_tmp.a;\n  #else\n    colorBodyEnv *= textureBodyEnv_tmp;\n  #endif\n  vec4 colorBloom = bloomJiang (pos);\n  vec4 colorBodyElement = vec4(1, 1, 1, 1);\n  vec4 textureBodyElement_tmp = texture2D(textureBodyElement, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyElement\n      textureBodyElement_tmp.a *= texture2D(textureBodyElement, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyElement.rgb *= (textureBodyElement_tmp.rgb * textureBodyElement_tmp.rgb);\n    colorBodyElement.a *= textureBodyElement_tmp.a;\n  #else\n    colorBodyElement *= textureBodyElement_tmp;\n  #endif\n  float lightMax = 0.15;\n  vec4 colorLight = vec4(1, 1, 1, 1);\n  vec4 textureEffLight_tmp = texture2D(textureEffLight, pos);\n  #if CC_USE_ALPHA_ATLAS_textureEffLight\n      textureEffLight_tmp.a *= texture2D(textureEffLight, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorLight.rgb *= (textureEffLight_tmp.rgb * textureEffLight_tmp.rgb);\n    colorLight.a *= textureEffLight_tmp.a;\n  #else\n    colorLight *= textureEffLight_tmp;\n  #endif\n  float colorLightAvg = (colorLight.r + colorLight.g + colorLight.b) / 3.0;\n  vec4 colorLightFinal = colorLight * step (colorLightAvg, lightMax) + colorLight * lightMax / colorLightAvg * step (lightMax, colorLightAvg);\n  colorLightFinal = max (colorLightFinal, vec4 (0));\n  vec4 colorBoard = vec4 (1, 1, 1, 1);\n  vec4 textureBoard_tmp = texture2D(textureBoard, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureBoard\n      textureBoard_tmp.a *= texture2D(textureBoard, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBoard.rgb *= (textureBoard_tmp.rgb * textureBoard_tmp.rgb);\n    colorBoard.a *= textureBoard_tmp.a;\n  #else\n    colorBoard *= textureBoard_tmp;\n  #endif\n  vec4 color = colorBodyEnv;\n  color += colorBloom;\n  color = colorBodyElement + color * (1.0 - colorBodyElement.a);\n  color += colorLightFinal;\n  color = colorBoard + color * (1.0 - colorBoard.a);\n  color *= v_color;\n  gl_FragColor = color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_textureEffOffsetAdd","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_textureEffOffsetSub","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_textureBodyEnv","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_textureBodyElement","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_textureEffLight","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_textureBoard","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"eff_screen","binding":1,"members":[{"name":"screenWidth","type":13,"count":1},{"name":"screenHeight","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]},{"name":"textureBodyEnv","type":29,"count":1,"binding":31,"defines":[]},{"name":"textureEffBloom0","type":29,"count":1,"binding":32,"defines":[]},{"name":"textureEffBloom1","type":29,"count":1,"binding":33,"defines":[]},{"name":"textureEffBloom2","type":29,"count":1,"binding":34,"defines":[]},{"name":"textureEffBloom3","type":29,"count":1,"binding":35,"defines":[]},{"name":"textureBodyElement","type":29,"count":1,"binding":36,"defines":[]},{"name":"textureEffLight","type":29,"count":1,"binding":37,"defines":[]},{"name":"textureEffOffsetAdd","type":29,"count":1,"binding":38,"defines":[]},{"name":"textureEffOffsetSub","type":29,"count":1,"binding":39,"defines":[]},{"name":"textureBoard","type":29,"count":1,"binding":40,"defines":[]}]}],[{"passes":[{"program":"eff_screen|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[28,"eff_aim_tips",[{"hash":1261299749,"record":null,"name":"eff_aim_tips|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin float v_dist;\nvoid main () {\n  vec4 o = v_color;\n  o.r = pow (o.r, 0.5);\n  o.g = pow (o.g, 0.5);\n  o.b = pow (o.b, 0.5);\n  o.rgb *= o.a;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying float v_dist;\nvoid main () {\n  vec4 o = v_color;\n  o.r = pow (o.r, 0.5);\n  o.g = pow (o.g, 0.5);\n  o.b = pow (o.b, 0.5);\n  o.rgb *= o.a;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_SUPPORT_standard_derivatives","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[]}],[{"passes":[{"program":"eff_aim_tips|vs|fs","blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":771,"blendSrcAlpha":1,"blendDstAlpha":771}]},"rasterizerState":{"cullMode":0},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]