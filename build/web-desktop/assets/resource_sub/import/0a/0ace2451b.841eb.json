[1,["21LFRpCV1A9K451iGky1JN"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,3]],[[[[0,"eff_prickle",[{"hash":2983061607,"record":null,"name":"eff_prickle|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_prickle {\n  float prickleCount;\n  float prickleLen;\n  float circle;\n  float enabledTime;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float len = sqrt (pow (rel.x, 2.0) + pow (rel.y, 2.0));\n  float cosVal = rel.x / len;\n  float sinVal = rel.y / len;\n  float angle = atan (sinVal / cosVal);\n  angle += mod (enabledTime, circle) / circle * 3.14 * 2.0;\n  angle *= prickleCount;\n  float rate = sin (angle);\n  rate = pow (rate, 16.0);\n  float borderTop = 1.0 - prickleLen + rate * prickleLen;\n  float borderBottom = 1.0 - prickleLen - rate * prickleLen;\n  o.a *= step (len, borderTop);\n  o.a *= step (borderBottom, len);\n  float opacityForY = (1.0 - sinVal) / 2.0;\n  opacityForY = pow (opacityForY, 2.0);\n  o.a *= opacityForY;\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float prickleCount;\nuniform float prickleLen;\nuniform float circle;\nuniform float enabledTime;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float len = sqrt (pow (rel.x, 2.0) + pow (rel.y, 2.0));\n  float cosVal = rel.x / len;\n  float sinVal = rel.y / len;\n  float angle = atan (sinVal / cosVal);\n  angle += mod (enabledTime, circle) / circle * 3.14 * 2.0;\n  angle *= prickleCount;\n  float rate = sin (angle);\n  rate = pow (rate, 16.0);\n  float borderTop = 1.0 - prickleLen + rate * prickleLen;\n  float borderBottom = 1.0 - prickleLen - rate * prickleLen;\n  o.a *= step (len, borderTop);\n  o.a *= step (borderBottom, len);\n  float opacityForY = (1.0 - sinVal) / 2.0;\n  opacityForY = pow (opacityForY, 2.0);\n  o.a *= opacityForY;\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"eff_prickle","binding":1,"members":[{"name":"prickleCount","type":13,"count":1},{"name":"prickleLen","type":13,"count":1},{"name":"circle","type":13,"count":1},{"name":"enabledTime","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"eff_prickle|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"prickleCount":{"type":13,"value":[4]},"prickleLen":{"type":13,"value":[0.5]},"circle":{"type":13,"value":[1000]}}}]}]]],0,0,[],[],[]],[[[1,"eff_prickle_mat",{"0":{"defines":{},"props":{"prickleLen":0.2,"prickleCount":8}}}]],0,0,[0],[0],[0]]]]