[1,["1f19N5PHhLkYZXhv5+3qw1","7dbyxjEOlCKIL1l4YrPgRw","bcxiApFHpHkK+Byi7d/RPp","cdauKUDvZDHqeZUtu+LdA/","54QYXH/31F+7k9xnFcSGOI","7cbSOlOfdFroOGmYSuzpWu","deIYdBTjlO2LHrXGH/Ayzr","93YGv4h6RDK7fmFI5+QlQB"],["node","_effectAsset","_spriteFrame","root","data","_defaultClip"],[["cc.Node",["_name","_groupIndex","_components","_prefab","_parent","_contentSize","_children","_color"],1,9,4,1,5,2,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Sprite",["_sizeMode","_srcBlendFactor","_dstBlendFactor","node","_materials","_spriteFrame"],0,1,3,6],["cc.Material",["_name","_techniqueData"],1],["cc.AnimationClip",["_name","_duration","sample","curveData"],0,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["31724Rcv7ZM4IB0V30Ql+9H",["node"],3,1],["21190CtPf1A/4eJxOmeR/iV",["node"],3,1],["cc.Animation",["node","_clips","_defaultClip"],3,1,3,6],["0b60fQk7M9NXZ/w6my0WI+G",["node"],3,1]],[[3,0,1,3],[5,0,1,2,4],[1,0,1,2,2],[0,0,1,4,2,3,5,3],[2,1,2,0,3,4,5,4],[10,0,1],[4,0,1,2,3,4],[6,0,2],[0,0,1,6,2,3,3],[0,0,1,4,2,3,7,5,3],[7,0,1],[8,0,1],[9,0,1,2,1],[1,1,2,1],[2,0,3,4,5,2]],[[[[0,"eff_circle_angulation_add_mat_255_510_765_1020",{"0":{"defines":{}}}]],0,0,[0],[1],[2]],[[[0,"eff_circle_angulation_sub_mat_255_510_765_1020",{"0":{"defines":{}}}]],0,0,[0],[1],[3]],[[[6,"prefab_eff_angulation",1.6,100,[{},"paths",11,[{},"img_add",11,[{},"props",11,[{},"color",12,[[[{"frame":0},"value",8,[4,4278190080]],[{"frame":0.8},"value",8,[4,4294967295]],[{"frame":1.6},"value",8,[4,4278190080]]],11,11,11],"scale",12,[[[{"frame":0},"value",8,[0,0,0]],[{"frame":0.8},"value",8,[0,1,1]],[{"frame":1.6},"value",8,[0,2,2]]],11,11,11]]],"img_sub",11,[{},"props",11,[{},"color",12,[[[{"frame":0},"value",8,[4,4278190080]],[{"frame":0.8},"value",8,[4,4294967295]],[{"frame":1.6},"value",8,[4,4278190080]]],11,11,11],"scale",12,[[[{"frame":0},"value",8,[0,0,0]],[{"frame":0.8},"value",8,[0,1,1]],[{"frame":1.6},"value",8,[0,2,2]]],11,11,11]]],"img_white",11,[{},"props",11,[{"opacity":[{"frame":0,"value":50},{"frame":1.6,"value":0}]},"scale",12,[[[{"frame":0},"value",8,[0,0,0]],[{"frame":1.6},"value",8,[0,2,2]]],11,11]]]]]]],0,0,[],[],[]],[[[1,"eff_white_circle",[{"hash":3708078930,"record":null,"name":"eff_white_circle|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_white_circle {\n  float whiteStart;\n  float whiteEnd;\n};\nvoid main () {\n  vec4 whiteColor = vec4 (1, 1, 1, 1);\n  vec2 rel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y) * 2.0;\n  float whiteStartRate = whiteStart / whiteEnd;\n  float whiteEndRate = 1.0;\n  if (distance < whiteStartRate) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteEndRate < distance) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteStartRate<= distance && distance <= whiteEndRate) {\n      float border = (whiteStartRate + whiteEndRate) / 2.0;\n      whiteColor.a = (1.0 - abs (distance - border) / (whiteEndRate - border));\n  };\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  whiteColor.a *= 2.0;\n  o *= whiteColor;\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float whiteStart;\nuniform float whiteEnd;\nvoid main () {\n  vec4 whiteColor = vec4 (1, 1, 1, 1);\n  vec2 rel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y) * 2.0;\n  float whiteStartRate = whiteStart / whiteEnd;\n  float whiteEndRate = 1.0;\n  if (distance < whiteStartRate) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteEndRate < distance) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteStartRate<= distance && distance <= whiteEndRate) {\n      float border = (whiteStartRate + whiteEndRate) / 2.0;\n      whiteColor.a = (1.0 - abs (distance - border) / (whiteEndRate - border));\n  };\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  whiteColor.a *= 2.0;\n  o *= whiteColor;\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"eff_white_circle","binding":1,"members":[{"name":"whiteStart","type":13,"count":1},{"name":"whiteEnd","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"eff_white_circle|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"whiteStart":{"type":13,"value":[255]},"whiteEnd":{"type":13,"value":[765]}}}]}]]],0,0,[],[],[]],[[[1,"eff_circle_angulation_add",[{"hash":3466524957,"record":null,"name":"eff_circle_angulation_add|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_circle_angulation_add {\n  float area1;\n  float area2;\n  float area3;\n  float area4;\n};\nvoid main () {\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y);\n  float area1Rate = area1 / area4;\n  float area2Rate = area2 / area4;\n  float area3Rate = area3 / area4;\n  float area4Rate = 1.0;\n  float offsetRight = 0.0;\n  float offsetTop = 0.0;\n  if (distance <= area1Rate) {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  }\n  else if (distance <= area2Rate) {\n      float rate = (distance - area1Rate) / (area2Rate - area1Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else if (distance <= area4Rate) {\n      float rate = (area4Rate - distance) / (area4Rate - area2Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  };\n  offsetTop = -offsetTop;\n  float a = (abs (offsetRight) + abs (offsetTop));\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= vec4 (offsetRight, offsetTop, 0.0, a);\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float area1;\nuniform float area2;\nuniform float area3;\nuniform float area4;\nvoid main () {\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y);\n  float area1Rate = area1 / area4;\n  float area2Rate = area2 / area4;\n  float area3Rate = area3 / area4;\n  float area4Rate = 1.0;\n  float offsetRight = 0.0;\n  float offsetTop = 0.0;\n  if (distance <= area1Rate) {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  }\n  else if (distance <= area2Rate) {\n      float rate = (distance - area1Rate) / (area2Rate - area1Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else if (distance <= area4Rate) {\n      float rate = (area4Rate - distance) / (area4Rate - area2Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  };\n  offsetTop = -offsetTop;\n  float a = (abs (offsetRight) + abs (offsetTop));\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= vec4 (offsetRight, offsetTop, 0.0, a);\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"eff_circle_angulation_add","binding":1,"members":[{"name":"area1","type":13,"count":1},{"name":"area2","type":13,"count":1},{"name":"area3","type":13,"count":1},{"name":"area4","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"eff_circle_angulation_add|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"area1":{"type":13,"value":[255]},"area2":{"type":13,"value":[510]},"area3":{"type":13,"value":[765]},"area4":{"type":13,"value":[1020]}}}]}]]],0,0,[],[],[]],[[[1,"eff_circle_angulation_sub",[{"hash":2465856629,"record":null,"name":"eff_circle_angulation_sub|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_circle_angulation_sub {\n  float area1;\n  float area2;\n  float area3;\n  float area4;\n};\nvoid main () {\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y);\n  float area1Rate = area1 / area4;\n  float area2Rate = area2 / area4;\n  float area3Rate = area3 / area4;\n  float area4Rate = 1.0;\n  float offsetRight = 0.0;\n  float offsetTop = 0.0;\n  if (distance <= area1Rate) {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  }\n  else if (distance <= area2Rate) {\n      float rate = (distance - area1Rate) / (area2Rate - area1Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else if (distance <= area4Rate) {\n      float rate = (area4Rate - distance) / (area4Rate - area2Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  };\n  offsetRight = -offsetRight;\n  float a = (abs (offsetRight) + abs (offsetTop));\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= vec4 (offsetRight, offsetTop, 0.0, a);\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float area1;\nuniform float area2;\nuniform float area3;\nuniform float area4;\nvoid main () {\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y);\n  float area1Rate = area1 / area4;\n  float area2Rate = area2 / area4;\n  float area3Rate = area3 / area4;\n  float area4Rate = 1.0;\n  float offsetRight = 0.0;\n  float offsetTop = 0.0;\n  if (distance <= area1Rate) {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  }\n  else if (distance <= area2Rate) {\n      float rate = (distance - area1Rate) / (area2Rate - area1Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else if (distance <= area4Rate) {\n      float rate = (area4Rate - distance) / (area4Rate - area2Rate);\n      float offsetDistance = rate * (area3 - area2);\n      offsetRight = rel.x / distance * offsetDistance / 255.0;\n      offsetTop = rel.y / distance * offsetDistance / 255.0;\n  }\n  else {\n      offsetRight = 0.0;\n      offsetTop = 0.0;\n  };\n  offsetRight = -offsetRight;\n  float a = (abs (offsetRight) + abs (offsetTop));\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= vec4 (offsetRight, offsetTop, 0.0, a);\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"eff_circle_angulation_sub","binding":1,"members":[{"name":"area1","type":13,"count":1},{"name":"area2","type":13,"count":1},{"name":"area3","type":13,"count":1},{"name":"area4","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"eff_circle_angulation_sub|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"area1":{"type":13,"value":[255]},"area2":{"type":13,"value":[510]},"area3":{"type":13,"value":[765]},"area4":{"type":13,"value":[1020]}}}]}]]],0,0,[],[],[]],[[[7,"eff_angulation"],[8,"eff_angulation",1,[-5,-6,-7],[[10,-2],[11,-3],[12,-4,[7],6]],[13,-1,0]],[3,"img_add",4,1,[[4,1,1,0,-8,[0],1],[5,-9]],[2,"3am1r2Q1hCnLJdC6S0poV/",1,0],[5,2036,2036]],[3,"img_sub",6,1,[[4,1,1,0,-10,[2],3],[5,-11]],[2,"07QT/CUcxM05THpm2YBjbJ",1,0],[5,2036,2036]],[9,"img_white",1,1,[[14,0,-12,[4],5]],[2,"2eGN7cz29ONaYXDvTHbupR",1,0],[4,4278228223],[5,1528,1528]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,4,1,12],[0,0,0,0,0,0,0,0],[-1,2,-1,2,-1,2,5,-1],[4,0,5,0,6,0,1,1]],[[[0,"eff_white_circle_mat_255_765",{"0":{"defines":{}}}]],0,0,[0],[1],[7]]]]