{
  "ver": "1.0.27",
  "uuid": "ed079c28-1510-417a-9e01-4495d0c85fea",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float offset;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float len = sqrt (pow (rel.x, 2.0) + pow (rel.y, 2.0));\n  float cos = rel.x / len;\n  float sin = rel.y / len;\n  float rate = o.a * clamp (1.4142 - len, 0.0, 1.0);\n  rate = sqrt (rate);\n  vec4 c = vec4 (cos * offset / 255.0 * rate, sin * offset / 255.0 * rate, 0, 1);\n  c *= v_color;\n  gl_FragColor = vec4 (c.rgb, abs (clamp (c.r, 0.0, 1.0)) + abs (clamp (c.g, 0.0, 1.0)));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_circle_angulation_add_mul {\n  float offset;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;\n  float len = sqrt (pow (rel.x, 2.0) + pow (rel.y, 2.0));\n  float cos = rel.x / len;\n  float sin = rel.y / len;\n  float rate = o.a * clamp (1.4142 - len, 0.0, 1.0);\n  rate = sqrt (rate);\n  vec4 c = vec4 (cos * offset / 255.0 * rate, sin * offset / 255.0 * rate, 0, 1);\n  c *= v_color;\n  gl_FragColor = vec4 (c.rgb, abs (clamp (c.r, 0.0, 1.0)) + abs (clamp (c.g, 0.0, 1.0)));\n}"
      }
    }
  ],
  "subMetas": {}
}