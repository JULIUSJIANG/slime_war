{
  "ver": "1.0.27",
  "uuid": "9ddcf05e-89fb-4b7c-9ad5-817e88b56851",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 colorLight;\nuniform vec4 colorDark;\nvoid main () {\n  vec4 colorTex = texture2D(texture, v_uv0);\n  float colorAvg = (colorTex.r + colorTex.g + colorTex.b) / 3.0;\n  float rateLight = colorAvg;\n  rateLight = step (0.5, rateLight);\n  float rateDark = colorAvg;\n  rateDark = step (rateDark, 0.5);\n  vec3 colorLightVec3 = colorLight.rgb * colorLight.a;\n  vec3 colorDarkVec3 = colorDark.rgb * colorDark.a;\n  vec3 colorLerp = colorLightVec3 * rateLight + colorDarkVec3 * rateDark;\n  float colorLerpPow = 1.0;\n  colorLerp *= vec3 (pow (colorAvg, colorLerpPow), pow (colorAvg, colorLerpPow), pow (colorAvg, colorLerpPow));\n  colorLerp = step (colorAvg, 0.05) * colorTex.rgb + step (0.05, colorAvg) * colorLerp;\n  gl_FragColor = vec4 (colorLerp, colorTex.a) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_altar {\n  vec4 colorLight;\n  vec4 colorDark;\n};\nvoid main () {\n  vec4 colorTex = texture (texture, v_uv0);\n  float colorAvg = (colorTex.r + colorTex.g + colorTex.b) / 3.0;\n  float rateLight = colorAvg;\n  rateLight = step (0.5, rateLight);\n  float rateDark = colorAvg;\n  rateDark = step (rateDark, 0.5);\n  vec3 colorLightVec3 = colorLight.rgb * colorLight.a;\n  vec3 colorDarkVec3 = colorDark.rgb * colorDark.a;\n  vec3 colorLerp = colorLightVec3 * rateLight + colorDarkVec3 * rateDark;\n  float colorLerpPow = 1.0;\n  colorLerp *= vec3 (pow (colorAvg, colorLerpPow), pow (colorAvg, colorLerpPow), pow (colorAvg, colorLerpPow));\n  colorLerp = step (colorAvg, 0.05) * colorTex.rgb + step (0.05, colorAvg) * colorLerp;\n  gl_FragColor = vec4 (colorLerp, colorTex.a) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}