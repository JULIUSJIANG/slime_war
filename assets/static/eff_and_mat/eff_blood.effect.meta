{
  "ver": "1.0.27",
  "uuid": "27e4f558-f2f9-4275-a0dd-294a6aa294c6",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texNoise;\nuniform float enabledTime;\nuniform float loopTime;\nuniform float scale;\nvoid main () {\n  vec4 colorNoise = texture2D(texNoise, vec2 (v_uv0.x, mod (enabledTime / loopTime, 1.0)));\n  float border = colorNoise.r * scale;\n  float distanceX = abs (v_uv0.x - 0.5);\n  float opacityX = 1.0 - distanceX / 0.5;\n  opacityX = pow (opacityX, 2.0);\n  float distanceY = abs (v_uv0.y - 1.0);\n  float opacityY = (border - distanceY) / border;\n  opacityY = 1.0 - abs (opacityY - 0.5) / 0.5;\n  vec4 colorTex = texture2D(texture, v_uv0);\n  colorTex.a *= opacityY;\n  colorTex.a *= opacityX;\n  colorTex.a *= step (distanceY, border);\n  colorTex *= v_color;\n  gl_FragColor = colorTex.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texNoise;\nuniform eff_blood {\n  float enabledTime;\n  float loopTime;\n  float scale;\n};\nvoid main () {\n  vec4 colorNoise = texture (texNoise, vec2 (v_uv0.x, mod (enabledTime / loopTime, 1.0)));\n  float border = colorNoise.r * scale;\n  float distanceX = abs (v_uv0.x - 0.5);\n  float opacityX = 1.0 - distanceX / 0.5;\n  opacityX = pow (opacityX, 2.0);\n  float distanceY = abs (v_uv0.y - 1.0);\n  float opacityY = (border - distanceY) / border;\n  opacityY = 1.0 - abs (opacityY - 0.5) / 0.5;\n  vec4 colorTex = texture (texture, v_uv0);\n  colorTex.a *= opacityY;\n  colorTex.a *= opacityX;\n  colorTex.a *= step (distanceY, border);\n  colorTex *= v_color;\n  gl_FragColor = colorTex.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}