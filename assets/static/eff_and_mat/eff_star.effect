// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        texSize: { value: [100, 100] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  uniform star {
    vec2 texSize;
  };

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform star {
    vec2 texSize;
  };

  float Hash31(in vec3 p) {
    return fract(937.276 * cos(836.826 * p.x + 263.736 * p.y + 374.723 * p.z + 637.839));
  }
  
  vec4 mainImage (vec2 fragCoord, vec2 iResolution, float iTime) {
    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;
    float time = iTime * 2.0;
    vec3 color = vec3(0.0);
  
    vec2 p = uv;
  
    float freq = fract(643.376 * cos(136.937)) + 1.0;
    vec2 pos = vec2(0.0, 0.0);
    pos.y = mod(pos.y + 15.0, 30.0) - 15.0;
    pos.x *= 0.1 * pos.y + 1.0;
    p -= 0.2 * pos;
  
    float an = mod(atan(p.y, p.x) + 6.2831 / 3.0, 6.2831 / 6.0) - 6.2831 / 3.0;
    p = vec2(cos(an), sin(an)) * length(p); 
  
    time = 1.0;
    float sec = floor(time);
    float frac = fract(time);
    float flicker = mix(Hash31(vec3(0.0, 0.0, sec)), Hash31(vec3(0.0, 0.0, sec + 1.0)), frac);
  
    float rad = 25.0 + 20.0 * flicker;
    float br = 250.0 * pow(1.0 / max(10.0, rad * (sqrt(abs(p.x)) + sqrt(abs(p.y))) + 0.9), 2.5);
    float rand = fract(847.384 * cos(264.836));
    if (rand > 0.5) color += mix(vec3(br, 0.4 * br, 0.0), vec3(1.0), br);
    else color += mix(vec3(0.0, 0.0, 0.6 * br), vec3(1.0), br);
  
    color *= 0.955 + 0.1 * flicker;

      return vec4 (color, 1.0);
  }

  void main () { 
    vec4 colorTex = texture (texture, v_uv0);
    vec4 colorStar = mainImage (v_uv0 * texSize, texSize, cc_time [0]);
    gl_FragColor = colorTex * colorStar * v_color;
  }
}%
