{
  "ver": "1.0.27",
  "uuid": "08b04d29-ff0d-4e89-b464-e50a4796beab",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float lightStart;\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  vec2 rel = v_uv0 - vec2 (0.5);\n  float opacityAngle = abs (atan2 (rel.y, rel.x)) / 3.1415;\n  float distance = sqrt (dot (rel, rel));\n  float opacity = (distance - lightStart) / (0.5 - lightStart);\n  opacity = abs(opacity - 0.5) / 0.5;\n  opacity = 1.0 - opacity;\n  opacity *= opacityAngle;\n  opacity *= step (lightStart, distance);\n  opacity *= step (distance, 0.5);\n  opacity = pow (opacity, 2.0);\n  opacity = clamp (opacity, 0.0, 1.0);\n  gl_FragColor = v_color * vec4 (1, 1, 1, opacity);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_defend {\n  float lightStart;\n};\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  vec2 rel = v_uv0 - vec2 (0.5);\n  float opacityAngle = abs (atan2 (rel.y, rel.x)) / 3.1415;\n  float distance = sqrt (dot (rel, rel));\n  float opacity = (distance - lightStart) / (0.5 - lightStart);\n  opacity = abs(opacity - 0.5) / 0.5;\n  opacity = 1.0 - opacity;\n  opacity *= opacityAngle;\n  opacity *= step (lightStart, distance);\n  opacity *= step (distance, 0.5);\n  opacity = pow (opacity, 2.0);\n  opacity = clamp (opacity, 0.0, 1.0);\n  gl_FragColor = v_color * vec4 (1, 1, 1, opacity);\n}"
      }
    }
  ],
  "subMetas": {}
}