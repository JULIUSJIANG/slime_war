{
  "ver": "1.0.27",
  "uuid": "93606bf8-87a4-432b-b7e6-148e7e425401",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float whiteStart;\nuniform float whiteEnd;\nvoid main () {\n  vec4 whiteColor = vec4 (1, 1, 1, 1);\n  vec2 rel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y) * 2.0;\n  float whiteStartRate = whiteStart / whiteEnd;\n  float whiteEndRate = 1.0;\n  if (distance < whiteStartRate) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteEndRate < distance) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteStartRate<= distance && distance <= whiteEndRate) {\n      float border = (whiteStartRate + whiteEndRate) / 2.0;\n      whiteColor.a = (1.0 - abs (distance - border) / (whiteEndRate - border));\n  };\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  whiteColor.a *= 2.0;\n  o *= whiteColor;\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_white_circle {\n  float whiteStart;\n  float whiteEnd;\n};\nvoid main () {\n  vec4 whiteColor = vec4 (1, 1, 1, 1);\n  vec2 rel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (rel.x * rel.x + rel.y * rel.y) * 2.0;\n  float whiteStartRate = whiteStart / whiteEnd;\n  float whiteEndRate = 1.0;\n  if (distance < whiteStartRate) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteEndRate < distance) {\n      whiteColor.a = 0.0;\n  };\n  if (whiteStartRate<= distance && distance <= whiteEndRate) {\n      float border = (whiteStartRate + whiteEndRate) / 2.0;\n      whiteColor.a = (1.0 - abs (distance - border) / (whiteEndRate - border));\n  };\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  whiteColor.a *= 2.0;\n  o *= whiteColor;\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}