// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        topSplitCount: { value: 4.0 }
        bottomRate: { value: 0.2 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  #define PI 3.1415

  uniform eff_around_fly {
    float topSplitCount;
    float bottomRate;
  };

  float atan2 (float y, float x) {
    return atan (y / x) + step (x, 0.0) * step (0.0, y) * PI - step (x, 0.0) * step (y, 0.0) * PI;
  }

  void main () {
    float yBottom = sin (v_uv0.x * PI);
    yBottom = pow (yBottom, 0.2);

    float yTop = sin (mod (v_uv0.x * topSplitCount, 1.0) * PI);
    yTop = pow (yTop, 0.5);
    yTop *= bottomRate;

    float opacityY = step (yTop, v_uv0.y) * step (v_uv0.y, yBottom) * (v_uv0.y - yTop) / (yBottom - yTop);
    opacityY = pow (opacityY, 2.0);

    vec4 colorTex = texture (texture, v_uv0);
    colorTex.a *= opacityY;
    colorTex *= v_color;
    gl_FragColor = colorTex.rgba;
  }
}%
