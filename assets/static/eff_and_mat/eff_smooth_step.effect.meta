{
  "ver": "1.0.27",
  "uuid": "bbaf3fee-86d0-4b01-b253-7c2e520b1b19",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float textureWidth;\nuniform float textureHeight;\nuniform float darkFirst;\nvec4 texelFetch (vec2 texelFetch_uv) {\n  vec2 pos = texelFetch_uv * vec2 (1.0 / textureWidth, 1.0 / textureHeight);\n  float none = step (1.0, step (pos.x, 0.0) + step (1.0, pos.x) + step (pos.y, 0.0) + step (1.0, pos.y));\n  return mix (texture2D (texture, pos), vec4 (0, 0, 0, 0), none);\n}\nfloat checkEqual (vec4 c1, vec4 c2) {\n  return step (\n        abs (c1 [0] * c1 [3] - c2 [0] * c2 [3])\n      + abs (c1 [1] * c1 [3] - c2 [1] * c2 [3])\n      + abs (c1 [2] * c1 [3] - c2 [2] * c2 [3])\n      + abs (c1 [3] - c2 [3]),\n      0.05\n  );\n}\nfloat cornerAble (vec2 uv, vec2 offsetLeft, vec2 offsetRelative, vec2 offsetRight) {\n  return 1.0;\n  vec4 colorUV = texelFetch(uv);\n  vec4 colorUVLeft = texelFetch(uv + offsetLeft);\n  vec4 colorUVRelative = texelFetch(uv + offsetRelative);\n  vec4 colorUVRight = texelFetch(uv + offsetRight);\n  float judge1 = step (1.0, (1.0 - checkEqual (colorUV, colorUVRelative)) + (1.0 - checkEqual (colorUVLeft, colorUVRight)));\n  vec4 avgUVWithRelative = (colorUV + colorUVRelative) * 0.5;\n  vec4 avgLeftWidthRight = (colorUVLeft + colorUVRight) * 0.5;\n  float judge2 = checkEqual (avgUVWithRelative, avgLeftWidthRight);\n  float weightLeftWithRight = dot (avgLeftWidthRight.rgb, vec3 (1, 1, 1)) * avgLeftWidthRight.a;\n  float weightUVWithRelative = dot (avgUVWithRelative.rgb, vec3 (1, 1, 1)) * avgUVWithRelative.a;\n  float judge3 = step (weightLeftWithRight * darkFirst, weightUVWithRelative * darkFirst);\n  return step (1.0, judge1 + judge2 + judge3);\n}\nfloat diag (inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, float tickness, float judgePrevious) {\n  vec4 v1 = texelFetch (uv + p1);\n  vec4 v2 = texelFetch (uv + p2);\n  float judgeEqual = checkEqual (v1, v2) * judgePrevious;\n  vec2 dir = p2 - p1;\n  dir = normalize (vec2 (dir.y, -dir.x));\n  vec2 lp = uv - (floor (uv + p1) + 0.5);\n  float shadow = dot (lp, dir);\n  float l = clamp ((tickness - shadow) * 10000.0, 0.0, 1.0);\n  sum = mix (sum, v1, l * judgeEqual);\n  return judgeEqual;\n}\nvec4 mainImage (in vec2 fragCoord)\n{\n  vec2 ip = fragCoord;\n  vec4 s = texelFetch (ip);\n  float judgeLT = cornerAble (ip, vec2 (-1, 0), vec2 (-1, 1), vec2 (0, 1));\n  float judgeLTDiag = diag (s, ip, vec2 (-1, 0), vec2 (0, 1), 0.3535, judgeLT);\n  diag (s, ip, vec2 (-1, 0), vec2 (1, 1), 0.2236, judgeLTDiag);\n  diag (s, ip, vec2 (-1, -1), vec2 (0, 1), 0.2236, judgeLTDiag);\n  float judgeRT = cornerAble (ip, vec2 (0, 1), vec2 (1, 1), vec2 (1, 0));\n  float judgeRTDiag = diag (s, ip, vec2 (0, 1), vec2 (1, 0), 0.3535, judgeRT);\n  diag (s, ip, vec2 (0, 1), vec2 (1, -1), 0.2236, judgeRTDiag);\n  diag (s, ip, vec2 (-1, 1), vec2 (1, 0), 0.2236, judgeRTDiag);\n  float judgeRB = cornerAble (ip, vec2 (1, 0), vec2 (1, -1), vec2 (0, -1));\n  float judgeRBDiag = diag (s, ip, vec2 (1, 0), vec2 (0, -1), 0.3535, judgeRB);\n  diag (s, ip, vec2 (1, 0), vec2 (-1, -1), 0.2236, judgeRBDiag);\n  diag (s, ip, vec2 (1, 1), vec2 (0, -1), 0.2236, judgeRBDiag);\n  float judgeLB = cornerAble (ip, vec2 (0, -1), vec2 (-1, -1), vec2 (-1, 0));\n  float judgeLBDiag = diag (s, ip, vec2 (0, -1), vec2 (-1, 0), 0.3535, judgeLB);\n  diag (s, ip, vec2 (0, -1), vec2 (-1, 1), 0.2236, judgeLBDiag);\n  diag (s, ip, vec2 (1, -1), vec2 (-1, 0), 0.2236, judgeLBDiag);\n  return s;\n  return s * 0.5 + texelFetch (ip) * 0.5;\n}\nvoid main () {\n  gl_FragColor = mainImage (v_uv0 * vec2 (textureWidth, textureHeight)) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform EffSmoothPro {\n  float textureWidth;\n  float textureHeight;\n  float darkFirst;\n};\nvec4 texelFetch (vec2 texelFetch_uv) {\n  vec2 pos = texelFetch_uv * vec2 (1.0 / textureWidth, 1.0 / textureHeight);\n  float none = step (1.0, step (pos.x, 0.0) + step (1.0, pos.x) + step (pos.y, 0.0) + step (1.0, pos.y));\n  return mix (texture2D (texture, pos), vec4 (0, 0, 0, 0), none);\n}\nfloat checkEqual (vec4 c1, vec4 c2) {\n  return step (\n        abs (c1 [0] * c1 [3] - c2 [0] * c2 [3])\n      + abs (c1 [1] * c1 [3] - c2 [1] * c2 [3])\n      + abs (c1 [2] * c1 [3] - c2 [2] * c2 [3])\n      + abs (c1 [3] - c2 [3]),\n      0.05\n  );\n}\nfloat cornerAble (vec2 uv, vec2 offsetLeft, vec2 offsetRelative, vec2 offsetRight) {\n  return 1.0;\n  vec4 colorUV = texelFetch(uv);\n  vec4 colorUVLeft = texelFetch(uv + offsetLeft);\n  vec4 colorUVRelative = texelFetch(uv + offsetRelative);\n  vec4 colorUVRight = texelFetch(uv + offsetRight);\n  float judge1 = step (1.0, (1.0 - checkEqual (colorUV, colorUVRelative)) + (1.0 - checkEqual (colorUVLeft, colorUVRight)));\n  vec4 avgUVWithRelative = (colorUV + colorUVRelative) * 0.5;\n  vec4 avgLeftWidthRight = (colorUVLeft + colorUVRight) * 0.5;\n  float judge2 = checkEqual (avgUVWithRelative, avgLeftWidthRight);\n  float weightLeftWithRight = dot (avgLeftWidthRight.rgb, vec3 (1, 1, 1)) * avgLeftWidthRight.a;\n  float weightUVWithRelative = dot (avgUVWithRelative.rgb, vec3 (1, 1, 1)) * avgUVWithRelative.a;\n  float judge3 = step (weightLeftWithRight * darkFirst, weightUVWithRelative * darkFirst);\n  return step (1.0, judge1 + judge2 + judge3);\n}\nfloat diag (inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, float tickness, float judgePrevious) {\n  vec4 v1 = texelFetch (uv + p1);\n  vec4 v2 = texelFetch (uv + p2);\n  float judgeEqual = checkEqual (v1, v2) * judgePrevious;\n  vec2 dir = p2 - p1;\n  dir = normalize (vec2 (dir.y, -dir.x));\n  vec2 lp = uv - (floor (uv + p1) + 0.5);\n  float shadow = dot (lp, dir);\n  float l = clamp ((tickness - shadow) * 10000.0, 0.0, 1.0);\n  sum = mix (sum, v1, l * judgeEqual);\n  return judgeEqual;\n}\nvec4 mainImage (in vec2 fragCoord)\n{\n  vec2 ip = fragCoord;\n  vec4 s = texelFetch (ip);\n  float judgeLT = cornerAble (ip, vec2 (-1, 0), vec2 (-1, 1), vec2 (0, 1));\n  float judgeLTDiag = diag (s, ip, vec2 (-1, 0), vec2 (0, 1), 0.3535, judgeLT);\n  diag (s, ip, vec2 (-1, 0), vec2 (1, 1), 0.2236, judgeLTDiag);\n  diag (s, ip, vec2 (-1, -1), vec2 (0, 1), 0.2236, judgeLTDiag);\n  float judgeRT = cornerAble (ip, vec2 (0, 1), vec2 (1, 1), vec2 (1, 0));\n  float judgeRTDiag = diag (s, ip, vec2 (0, 1), vec2 (1, 0), 0.3535, judgeRT);\n  diag (s, ip, vec2 (0, 1), vec2 (1, -1), 0.2236, judgeRTDiag);\n  diag (s, ip, vec2 (-1, 1), vec2 (1, 0), 0.2236, judgeRTDiag);\n  float judgeRB = cornerAble (ip, vec2 (1, 0), vec2 (1, -1), vec2 (0, -1));\n  float judgeRBDiag = diag (s, ip, vec2 (1, 0), vec2 (0, -1), 0.3535, judgeRB);\n  diag (s, ip, vec2 (1, 0), vec2 (-1, -1), 0.2236, judgeRBDiag);\n  diag (s, ip, vec2 (1, 1), vec2 (0, -1), 0.2236, judgeRBDiag);\n  float judgeLB = cornerAble (ip, vec2 (0, -1), vec2 (-1, -1), vec2 (-1, 0));\n  float judgeLBDiag = diag (s, ip, vec2 (0, -1), vec2 (-1, 0), 0.3535, judgeLB);\n  diag (s, ip, vec2 (0, -1), vec2 (-1, 1), 0.2236, judgeLBDiag);\n  diag (s, ip, vec2 (1, -1), vec2 (-1, 0), 0.2236, judgeLBDiag);\n  return s;\n  return s * 0.5 + texelFetch (ip) * 0.5;\n}\nvoid main () {\n  gl_FragColor = mainImage (v_uv0 * vec2 (textureWidth, textureHeight)) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}