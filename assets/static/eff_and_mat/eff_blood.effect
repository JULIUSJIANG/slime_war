// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        texNoise: { value: white }
        enabledTime: { value: 0.0 }
        loopTime: { value: 1000.0 }
        scale: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D texNoise;

  uniform eff_blood {
    float enabledTime;
    float loopTime;
    float scale;
  };

  void main () {
    vec4 colorNoise = texture (texNoise, vec2 (v_uv0.x, mod (enabledTime / loopTime, 1.0)));
    float border = colorNoise.r * scale;

    float distanceX = abs (v_uv0.x - 0.5);
    float opacityX = 1.0 - distanceX / 0.5;
    opacityX = pow (opacityX, 2.0);

    float distanceY = abs (v_uv0.y - 1.0);
    float opacityY = (border - distanceY) / border;
    opacityY = 1.0 - abs (opacityY - 0.5) / 0.5;

    vec4 colorTex = texture (texture, v_uv0);
    colorTex.a *= opacityY;
    colorTex.a *= opacityX;
    colorTex.a *= step (distanceY, border);
    colorTex *= v_color;
    gl_FragColor = colorTex.rgba;
  }
}%
