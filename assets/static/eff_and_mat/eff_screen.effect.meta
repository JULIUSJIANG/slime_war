{
  "ver": "1.0.27",
  "uuid": "a4c88cdf-c092-46fd-8a10-884636670c91",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D textureBodyEnv;\nuniform sampler2D textureEffBloom0;\nuniform sampler2D textureEffBloom1;\nuniform sampler2D textureEffBloom2;\nuniform sampler2D textureEffBloom3;\nuniform sampler2D textureBodyElement;\nuniform sampler2D textureEffLight;\nuniform sampler2D textureEffOffsetAdd;\nuniform sampler2D textureEffOffsetSub;\nuniform sampler2D textureBoard;\nuniform float screenWidth;\nuniform float screenHeight;\nvec4 bloomJiangTexture (sampler2D tex, vec2 uv, float posRate) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += texture2D(tex, uv + vec2 (0, posRate / screenHeight));\n  color += texture2D(tex, uv + vec2 (posRate / screenWidth, 0));\n  color += texture2D(tex, uv + vec2 (0, -posRate / screenHeight));\n  color += texture2D(tex, uv + vec2 (-posRate / screenWidth, posRate / screenHeight));\n  color /= 4.0;\n  return color;\n}\nvec4 bloomJiang (vec2 uv) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += bloomJiangTexture (textureEffBloom1, uv, 2.0);\n  return color;\n}\nvoid main () {\n  vec2 pos = vec2(v_uv0[0], v_uv0[1]);\n  vec4 colorEffOffsetAdd = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetAdd_tmp = texture2D(textureEffOffsetAdd, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetAdd\n      textureEffOffsetAdd_tmp.a *= texture2D(textureEffOffsetAdd, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetAdd.rgb *= (textureEffOffsetAdd_tmp.rgb * textureEffOffsetAdd_tmp.rgb);\n    colorEffOffsetAdd.a *= textureEffOffsetAdd_tmp.a;\n  #else\n    colorEffOffsetAdd *= textureEffOffsetAdd_tmp;\n  #endif\n  pos[0] += colorEffOffsetAdd[0] * 255.0 / screenWidth;\n  pos[1] += colorEffOffsetAdd[1] * 255.0 / screenHeight;\n  vec4 colorEffOffsetSub = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetSub_tmp = texture2D(textureEffOffsetSub, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetSub\n      textureEffOffsetSub_tmp.a *= texture2D(textureEffOffsetSub, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetSub.rgb *= (textureEffOffsetSub_tmp.rgb * textureEffOffsetSub_tmp.rgb);\n    colorEffOffsetSub.a *= textureEffOffsetSub_tmp.a;\n  #else\n    colorEffOffsetSub *= textureEffOffsetSub_tmp;\n  #endif\n  pos[0] -= colorEffOffsetSub[0] * 255.0 / screenWidth;\n  pos[1] -= colorEffOffsetSub[1] * 255.0 / screenHeight;\n  vec4 colorBodyEnv = vec4(1, 1, 1, 1);\n  vec4 textureBodyEnv_tmp = texture2D(textureBodyEnv, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyEnv\n      textureBodyEnv_tmp.a *= texture2D(textureBodyEnv, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyEnv.rgb *= (textureBodyEnv_tmp.rgb * textureBodyEnv_tmp.rgb);\n    colorBodyEnv.a *= textureBodyEnv_tmp.a;\n  #else\n    colorBodyEnv *= textureBodyEnv_tmp;\n  #endif\n  vec4 colorBloom = bloomJiang (pos);\n  vec4 colorBodyElement = vec4(1, 1, 1, 1);\n  vec4 textureBodyElement_tmp = texture2D(textureBodyElement, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyElement\n      textureBodyElement_tmp.a *= texture2D(textureBodyElement, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyElement.rgb *= (textureBodyElement_tmp.rgb * textureBodyElement_tmp.rgb);\n    colorBodyElement.a *= textureBodyElement_tmp.a;\n  #else\n    colorBodyElement *= textureBodyElement_tmp;\n  #endif\n  float lightMax = 0.15;\n  vec4 colorLight = vec4(1, 1, 1, 1);\n  vec4 textureEffLight_tmp = texture2D(textureEffLight, pos);\n  #if CC_USE_ALPHA_ATLAS_textureEffLight\n      textureEffLight_tmp.a *= texture2D(textureEffLight, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorLight.rgb *= (textureEffLight_tmp.rgb * textureEffLight_tmp.rgb);\n    colorLight.a *= textureEffLight_tmp.a;\n  #else\n    colorLight *= textureEffLight_tmp;\n  #endif\n  float colorLightAvg = (colorLight.r + colorLight.g + colorLight.b) / 3.0;\n  vec4 colorLightFinal = colorLight * step (colorLightAvg, lightMax) + colorLight * lightMax / colorLightAvg * step (lightMax, colorLightAvg);\n  colorLightFinal = max (colorLightFinal, vec4 (0));\n  vec4 colorBoard = vec4 (1, 1, 1, 1);\n  vec4 textureBoard_tmp = texture2D(textureBoard, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureBoard\n      textureBoard_tmp.a *= texture2D(textureBoard, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBoard.rgb *= (textureBoard_tmp.rgb * textureBoard_tmp.rgb);\n    colorBoard.a *= textureBoard_tmp.a;\n  #else\n    colorBoard *= textureBoard_tmp;\n  #endif\n  vec4 color = colorBodyEnv;\n  color += colorBloom;\n  color = colorBodyElement + color * (1.0 - colorBodyElement.a);\n  color += colorLightFinal;\n  color = colorBoard + color * (1.0 - colorBoard.a);\n  color *= v_color;\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D textureBodyEnv;\nuniform sampler2D textureEffBloom0;\nuniform sampler2D textureEffBloom1;\nuniform sampler2D textureEffBloom2;\nuniform sampler2D textureEffBloom3;\nuniform sampler2D textureBodyElement;\nuniform sampler2D textureEffLight;\nuniform sampler2D textureEffOffsetAdd;\nuniform sampler2D textureEffOffsetSub;\nuniform sampler2D textureBoard;\nuniform eff_screen {\n  float screenWidth;\n  float screenHeight;\n};\nvec4 bloomJiangTexture (sampler2D tex, vec2 uv, float posRate) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += texture (tex, uv + vec2 (0, posRate / screenHeight));\n  color += texture (tex, uv + vec2 (posRate / screenWidth, 0));\n  color += texture (tex, uv + vec2 (0, -posRate / screenHeight));\n  color += texture (tex, uv + vec2 (-posRate / screenWidth, posRate / screenHeight));\n  color /= 4.0;\n  return color;\n}\nvec4 bloomJiang (vec2 uv) {\n  vec4 color = vec4 (0.0, 0.0, 0.0, 0.0);\n  color += bloomJiangTexture (textureEffBloom1, uv, 2.0);\n  return color;\n}\nvoid main () {\n  vec2 pos = vec2(v_uv0[0], v_uv0[1]);\n  vec4 colorEffOffsetAdd = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetAdd_tmp = texture(textureEffOffsetAdd, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetAdd\n      textureEffOffsetAdd_tmp.a *= texture(textureEffOffsetAdd, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetAdd.rgb *= (textureEffOffsetAdd_tmp.rgb * textureEffOffsetAdd_tmp.rgb);\n    colorEffOffsetAdd.a *= textureEffOffsetAdd_tmp.a;\n  #else\n    colorEffOffsetAdd *= textureEffOffsetAdd_tmp;\n  #endif\n  pos[0] += colorEffOffsetAdd[0] * 255.0 / screenWidth;\n  pos[1] += colorEffOffsetAdd[1] * 255.0 / screenHeight;\n  vec4 colorEffOffsetSub = vec4(1, 1, 1, 1);\n  vec4 textureEffOffsetSub_tmp = texture(textureEffOffsetSub, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureEffOffsetSub\n      textureEffOffsetSub_tmp.a *= texture(textureEffOffsetSub, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorEffOffsetSub.rgb *= (textureEffOffsetSub_tmp.rgb * textureEffOffsetSub_tmp.rgb);\n    colorEffOffsetSub.a *= textureEffOffsetSub_tmp.a;\n  #else\n    colorEffOffsetSub *= textureEffOffsetSub_tmp;\n  #endif\n  pos[0] -= colorEffOffsetSub[0] * 255.0 / screenWidth;\n  pos[1] -= colorEffOffsetSub[1] * 255.0 / screenHeight;\n  vec4 colorBodyEnv = vec4(1, 1, 1, 1);\n  vec4 textureBodyEnv_tmp = texture(textureBodyEnv, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyEnv\n      textureBodyEnv_tmp.a *= texture(textureBodyEnv, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyEnv.rgb *= (textureBodyEnv_tmp.rgb * textureBodyEnv_tmp.rgb);\n    colorBodyEnv.a *= textureBodyEnv_tmp.a;\n  #else\n    colorBodyEnv *= textureBodyEnv_tmp;\n  #endif\n  vec4 colorBloom = bloomJiang (pos);\n  vec4 colorBodyElement = vec4(1, 1, 1, 1);\n  vec4 textureBodyElement_tmp = texture(textureBodyElement, pos);\n  #if CC_USE_ALPHA_ATLAS_textureBodyElement\n      textureBodyElement_tmp.a *= texture(textureBodyElement, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBodyElement.rgb *= (textureBodyElement_tmp.rgb * textureBodyElement_tmp.rgb);\n    colorBodyElement.a *= textureBodyElement_tmp.a;\n  #else\n    colorBodyElement *= textureBodyElement_tmp;\n  #endif\n  float lightMax = 0.15;\n  vec4 colorLight = vec4(1, 1, 1, 1);\n  vec4 textureEffLight_tmp = texture(textureEffLight, pos);\n  #if CC_USE_ALPHA_ATLAS_textureEffLight\n      textureEffLight_tmp.a *= texture(textureEffLight, pos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorLight.rgb *= (textureEffLight_tmp.rgb * textureEffLight_tmp.rgb);\n    colorLight.a *= textureEffLight_tmp.a;\n  #else\n    colorLight *= textureEffLight_tmp;\n  #endif\n  float colorLightAvg = (colorLight.r + colorLight.g + colorLight.b) / 3.0;\n  vec4 colorLightFinal = colorLight * step (colorLightAvg, lightMax) + colorLight * lightMax / colorLightAvg * step (lightMax, colorLightAvg);\n  colorLightFinal = max (colorLightFinal, vec4 (0));\n  vec4 colorBoard = vec4 (1, 1, 1, 1);\n  vec4 textureBoard_tmp = texture(textureBoard, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_textureBoard\n      textureBoard_tmp.a *= texture(textureBoard, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    colorBoard.rgb *= (textureBoard_tmp.rgb * textureBoard_tmp.rgb);\n    colorBoard.a *= textureBoard_tmp.a;\n  #else\n    colorBoard *= textureBoard_tmp;\n  #endif\n  vec4 color = colorBodyEnv;\n  color += colorBloom;\n  color = colorBodyElement + color * (1.0 - colorBodyElement.a);\n  color += colorLightFinal;\n  color = colorBoard + color * (1.0 - colorBoard.a);\n  color *= v_color;\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}