// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        textureMask: { value: white }
        alphaThreshold: { value: 0.5 }
        texWidth: { value: 1.0 }
        texHeight: { value: 1.0 }
        cutX: { value: 0.0 }
        cutY: { value: 0.0 }
        width: { value: 1.0 }
        height: { value: 1.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  uniform eff_img_tint {
    float texWidth;
    float texHeight;
    float cutX;
    float cutY;
    float width;
    float height;
  };

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D textureMask;
  
  uniform eff_img_tint {
    float texWidth;
    float texHeight;
    float cutX;
    float cutY;
    float width;
    float height;
  };

  void main () {
    vec2 posForTint = vec2 ( 
        (cutX + width * v_uv0.x) / texWidth,
        (cutY + height * v_uv0.y) / texHeight
    );
    vec4 colorTex = texture (texture, posForTint);
    vec4 colorMask = texture (textureMask, v_uv0);
    gl_FragColor = colorTex * colorMask * v_color;
    // gl_FragColor = colorTex * v_color;
  }
}%
