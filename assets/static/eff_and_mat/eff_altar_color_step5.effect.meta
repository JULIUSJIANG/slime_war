{
  "ver": "1.0.27",
  "uuid": "5cd0f378-3e8c-4962-bef8-d0eb4e5996d7",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 border0Color;\nuniform vec2 border1Color;\nuniform vec2 border2Color;\nuniform vec2 border3Color;\nuniform vec2 border4Color;\nuniform float border0;\nuniform float border1;\nuniform float border2;\nuniform float border3;\nuniform float border4;\nconst float DARK = 0.05;\nvoid main () {\n  vec3 colorLight = vec3 (0.75, 0.44, 0.62);\n  vec3 colorDark = vec3 (0.24, 0.33, 0.58);\n  vec4 colorTex = texture2D(texture, v_uv0);\n  float colorTexAvg = (colorTex.r + colorTex.g + colorTex.b) / 3.0;\n  vec3 colorDisplay = vec3 (0, 0, 0) * step (colorTexAvg, DARK)\n      + (colorDark * (1.0 - border0Color[0]) + colorLight * border0Color [0]) * border0Color[1] * step (DARK, colorTexAvg) * step (colorTexAvg, border0)\n      + (colorDark * (1.0 - border1Color[0]) + colorLight * border1Color [0]) * border1Color[1] * step (border0, colorTexAvg) * step (colorTexAvg, border1)\n      + (colorDark * (1.0 - border2Color[0]) + colorLight * border2Color [0]) * border2Color[1] * step (border1, colorTexAvg) * step (colorTexAvg, border2)\n      + (colorDark * (1.0 - border3Color[0]) + colorLight * border3Color [0]) * border3Color[1] * step (border2, colorTexAvg) * step (colorTexAvg, border3)\n      + (colorDark * (1.0 - border4Color[0]) + colorLight * border4Color [0]) * border4Color[1] * step (border3, colorTexAvg) * step (colorTexAvg, border4);\n  gl_FragColor = vec4 (colorDisplay.r, colorDisplay.g, colorDisplay.b, colorTex.a) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_altar_color_step4 {\n  vec2 border0Color;\n  vec2 border1Color;\n  vec2 border2Color;\n  vec2 border3Color;\n  vec2 border4Color;\n  float border0;\n  float border1;\n  float border2;\n  float border3;\n  float border4;\n};\nconst float DARK = 0.05;\nvoid main () {\n  vec3 colorLight = vec3 (0.75, 0.44, 0.62);\n  vec3 colorDark = vec3 (0.24, 0.33, 0.58);\n  vec4 colorTex = texture (texture, v_uv0);\n  float colorTexAvg = (colorTex.r + colorTex.g + colorTex.b) / 3.0;\n  vec3 colorDisplay = vec3 (0, 0, 0) * step (colorTexAvg, DARK)\n      + (colorDark * (1.0 - border0Color[0]) + colorLight * border0Color [0]) * border0Color[1] * step (DARK, colorTexAvg) * step (colorTexAvg, border0)\n      + (colorDark * (1.0 - border1Color[0]) + colorLight * border1Color [0]) * border1Color[1] * step (border0, colorTexAvg) * step (colorTexAvg, border1)\n      + (colorDark * (1.0 - border2Color[0]) + colorLight * border2Color [0]) * border2Color[1] * step (border1, colorTexAvg) * step (colorTexAvg, border2)\n      + (colorDark * (1.0 - border3Color[0]) + colorLight * border3Color [0]) * border3Color[1] * step (border2, colorTexAvg) * step (colorTexAvg, border3)\n      + (colorDark * (1.0 - border4Color[0]) + colorLight * border4Color [0]) * border4Color[1] * step (border3, colorTexAvg) * step (colorTexAvg, border4);\n  gl_FragColor = vec4 (colorDisplay.r, colorDisplay.g, colorDisplay.b, colorTex.a) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}