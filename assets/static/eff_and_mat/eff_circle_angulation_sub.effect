// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        area1: { value: 255.0 }
        area2: { value: 510.0 }
        area3: { value: 765.0 }
        area4: { value: 1020.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform eff_circle_angulation_sub {
    float area1; 
    float area2;
    float area3;
    float area4;
  };

  void main () {
    vec2 rel = (v_uv0 - vec2 (0.5, 0.5)) * 2.0;
    float distance = sqrt (rel.x * rel.x + rel.y * rel.y);
    float area1Rate = area1 / area4;
    float area2Rate = area2 / area4;
    float area3Rate = area3 / area4;
    float area4Rate = 1.0;

    float offsetRight = 0.0;
    float offsetTop = 0.0;

    if (distance <= area1Rate) {
        offsetRight = 0.0;
        offsetTop = 0.0;
    }
    else if (distance <= area2Rate) {
        float rate = (distance - area1Rate) / (area2Rate - area1Rate);
        float offsetDistance = rate * (area3 - area2);
        offsetRight = rel.x / distance * offsetDistance / 255.0;
        offsetTop = rel.y / distance * offsetDistance / 255.0;
    }
    else if (distance <= area4Rate) {
        float rate = (area4Rate - distance) / (area4Rate - area2Rate);
        float offsetDistance = rate * (area3 - area2);
        offsetRight = rel.x / distance * offsetDistance / 255.0;
        offsetTop = rel.y / distance * offsetDistance / 255.0;
    }
    else {
        offsetRight = 0.0;
        offsetTop = 0.0;
    };
    offsetRight = -offsetRight;

    float a = (abs (offsetRight) + abs (offsetTop));

    vec4 o = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, o);
    o *= vec4 (offsetRight, offsetTop, 0.0, a);
    o *= v_color;
    gl_FragColor = o.rgba;
  }
}%
