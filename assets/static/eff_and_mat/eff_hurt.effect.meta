{
  "ver": "1.0.27",
  "uuid": "5f0fc099-84f1-4dc6-8cd8-565e39d1df81",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float enabledTime;\nuniform float msFadeIn;\nuniform float msFadeOut;\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  float time = enabledTime;\n  float radiusBoomStart = 0.6;\n  float radiusBoomEnd = 0.2;\n  float lineStart = sqrt (2.0 * pow (0.5, 4.0));\n  float lineEnd = lineStart;\n  float rateIn = clamp (time / msFadeIn, 0.0, 1.0);\n  float rateOut = clamp ((msFadeOut - time) / msFadeOut, 0.0, 1.0);\n  float rateOutTransform = pow (rateOut, 4.0);\n  float radiusBoom = radiusBoomStart + (radiusBoomEnd - radiusBoomStart) * (1.0 - rateOutTransform);\n  float radiusLine = lineStart + (lineEnd - lineStart) * (1.0 - rateOutTransform);\n  vec2 rel = v_uv0 - vec2 (0.5);\n  float distance = sqrt (dot (rel, rel));\n  float angle = atan2 (rel.y, rel.x) + 3.1415;\n  float x = (mod (angle, 3.1415 / 2.0)) / (3.1415 / 2.0);\n  float y = 1.0 - abs (x - 0.5) / 0.5;\n  y = pow (y, 4.0);\n  y *= radiusLine;\n  y += step (y, radiusBoom) * (radiusBoom - y) * 0.5;\n  float opacityStar = clamp ((y - distance) / distance, 0.0, 1.0);\n  opacityStar = clamp (opacityStar, 0.0, 1.0);\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o.a *= opacityStar;\n  o.a *= rateIn;\n  o.a *= rateOut;\n  o.a = pow (o.a, 0.5);\n  o.a = clamp (o.a, 0.0, 1.0);\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_bring {\n  float enabledTime;\n  float msFadeIn;\n  float msFadeOut;\n};\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  float time = enabledTime;\n  float radiusBoomStart = 0.6;\n  float radiusBoomEnd = 0.2;\n  float lineStart = sqrt (2.0 * pow (0.5, 4.0));\n  float lineEnd = lineStart;\n  float rateIn = clamp (time / msFadeIn, 0.0, 1.0);\n  float rateOut = clamp ((msFadeOut - time) / msFadeOut, 0.0, 1.0);\n  float rateOutTransform = pow (rateOut, 4.0);\n  float radiusBoom = radiusBoomStart + (radiusBoomEnd - radiusBoomStart) * (1.0 - rateOutTransform);\n  float radiusLine = lineStart + (lineEnd - lineStart) * (1.0 - rateOutTransform);\n  vec2 rel = v_uv0 - vec2 (0.5);\n  float distance = sqrt (dot (rel, rel));\n  float angle = atan2 (rel.y, rel.x) + 3.1415;\n  float x = (mod (angle, 3.1415 / 2.0)) / (3.1415 / 2.0);\n  float y = 1.0 - abs (x - 0.5) / 0.5;\n  y = pow (y, 4.0);\n  y *= radiusLine;\n  y += step (y, radiusBoom) * (radiusBoom - y) * 0.5;\n  float opacityStar = clamp ((y - distance) / distance, 0.0, 1.0);\n  opacityStar = clamp (opacityStar, 0.0, 1.0);\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o.a *= opacityStar;\n  o.a *= rateIn;\n  o.a *= rateOut;\n  o.a = pow (o.a, 0.5);\n  o.a = clamp (o.a, 0.0, 1.0);\n  o *= v_color;\n  gl_FragColor = o.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}