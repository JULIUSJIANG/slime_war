{
  "ver": "1.0.27",
  "uuid": "442f31b8-cf88-4e3c-8c22-6d90a1fec48c",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nconst float blurRadius = 5.0;\nconst float borderLeft = -blurRadius;\nconst float borderRight = blurRadius;\nuniform float texWidth;\nuniform float texHeight;\nvoid main () {\n  vec4 finalColor = vec4(0, 0, 0, 0);\n  vec2 pos = vec2(0, 0);\n  vec4 color = vec4(0, 0, 0, 0);\n  float blurOffsetPerpixelHor = 1.0 / texWidth;\n  float blurOffsetPerpixelVer = 1.0 / texHeight;\n  float volume = (blurRadius + blurRadius - 1.0) * (blurRadius + blurRadius - 1.0) * blurRadius / 3.0;\n  for (float x = borderLeft; x <= borderRight; x++) {\n      for (float y = borderLeft; y <= borderRight; y++) {\n          pos[0] = v_uv0[0] + blurOffsetPerpixelHor * x;\n          pos[1] = v_uv0[1] + blurOffsetPerpixelVer * y;\n          finalColor += texture2D(texture, pos) * min(blurRadius - abs(x), blurRadius - abs(y)) / volume;\n      };\n  };\n  gl_FragColor = max (finalColor, texture2D(texture, v_uv0)) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nconst float blurRadius = 5.0;\nconst float borderLeft = -blurRadius;\nconst float borderRight = blurRadius;\nuniform EffBlur {\n  float texWidth;\n  float texHeight;\n};\nvoid main () {\n  vec4 finalColor = vec4(0, 0, 0, 0);\n  vec2 pos = vec2(0, 0);\n  vec4 color = vec4(0, 0, 0, 0);\n  float blurOffsetPerpixelHor = 1.0 / texWidth;\n  float blurOffsetPerpixelVer = 1.0 / texHeight;\n  float volume = (blurRadius + blurRadius - 1.0) * (blurRadius + blurRadius - 1.0) * blurRadius / 3.0;\n  for (float x = borderLeft; x <= borderRight; x++) {\n      for (float y = borderLeft; y <= borderRight; y++) {\n          pos[0] = v_uv0[0] + blurOffsetPerpixelHor * x;\n          pos[1] = v_uv0[1] + blurOffsetPerpixelVer * y;\n          finalColor += texture(texture, pos) * min(blurRadius - abs(x), blurRadius - abs(y)) / volume;\n      };\n  };\n  gl_FragColor = max (finalColor, texture(texture, v_uv0)) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}