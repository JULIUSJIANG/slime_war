{
  "ver": "1.0.27",
  "uuid": "a1e141b5-079b-41d0-94db-157cefadee55",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float texWidth;\nuniform float texHeight;\nuniform float pointSpeed;\nuniform float lineLength;\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  float msTime = cc_time [0] * 1000.0;\n  vec2 relVec = (v_uv0 - vec2 (0.5, 0.5)) * vec2 (texWidth, texHeight);\n  float relAngle = atan2 (relVec.y, relVec.x);\n  float msCircle = (texWidth * 2.0 + texHeight * 2.0) / pointSpeed;\n  float mergeAngleA = 0.0;\n  float mergeAngleB = 0.0;\n  float rightMS = mod (msTime, msCircle);\n  float rightTagPosX = texWidth / 2.0;\n  float rightMove = pointSpeed * rightMS;\n  float rightTagPosY = rightMove + -texHeight / 2.0 + -lineLength;\n  float rightTagAngleA = atan (rightTagPosY / rightTagPosX);\n  float rightTagAngleB = atan ((rightTagPosY + lineLength) / rightTagPosX);\n  mergeAngleA += step (lineLength, rightMove) * step (rightMove, lineLength + texHeight) * rightTagAngleA;\n  mergeAngleB += step (0.0, rightMove) * step (rightMove, texHeight) * rightTagAngleB;\n  float topMS = mod (msTime - texHeight / pointSpeed, msCircle);\n  float topMove = pointSpeed * topMS;\n  float topTagPosX = -topMove + texWidth / 2.0 + lineLength;\n  float topTagPosY = texHeight / 2.0;\n  float topTagAngleA = atan2 (topTagPosY, topTagPosX);\n  float topTagAngleB = atan2 (topTagPosY, topTagPosX - lineLength);\n  mergeAngleA += step (lineLength, topMove) * step (topMove, lineLength + texWidth) * topTagAngleA;\n  mergeAngleB += step (0.0, topMove) * step (topMove, texWidth) * topTagAngleB;\n  float leftMS = mod (msTime - (texHeight + texWidth) / pointSpeed, msCircle);\n  float leftMove = pointSpeed * leftMS;\n  float leftTagPoxX = -texWidth / 2.0;\n  float leftTagPoxY = -leftMove + texHeight / 2.0 + lineLength;\n  float leftAngleA = atan2 (leftTagPoxY, leftTagPoxX);\n  float leftAngleB = atan2 (leftTagPoxY - lineLength, leftTagPoxX);\n  mergeAngleA += step (lineLength, leftMove) * step (leftMove, lineLength + texHeight) * leftAngleA;\n  mergeAngleB += step (0.0, leftMove) * step (leftMove, texHeight) * leftAngleB;\n  float bottomMS = mod (msTime - (texHeight * 2.0 + texWidth) / pointSpeed, msCircle);\n  float bottomMove = pointSpeed * bottomMS;\n  float bottomTagPoxX = bottomMove - texWidth / 2.0 - lineLength;\n  float bottomTagPosY = -texHeight / 2.0;\n  float bottomTagAngleA = atan2 (bottomTagPosY, bottomTagPoxX);\n  float bottomTagAngleB = atan2 (bottomTagPosY, bottomTagPoxX + lineLength);\n  mergeAngleA += step (lineLength, bottomMove) * step (bottomMove, lineLength + texWidth) * bottomTagAngleA;\n  mergeAngleB += step (0.0, bottomMove) * step (bottomMove, texWidth) * bottomTagAngleB;\n  float isBorderCover = step (mergeAngleB, mergeAngleA);\n  mergeAngleB += isBorderCover * 2.0 * 3.1415;\n  relAngle += isBorderCover * step (relAngle, 0.0) * 2.0 * 3.1415;\n  float opacity = (relAngle - mergeAngleA) / (mergeAngleB - mergeAngleA);\n  opacity = 1.0 - abs (opacity - 0.5) / 0.5;\n  opacity *= step (mergeAngleA, relAngle) * step (relAngle, mergeAngleB);\n  vec4 colorTex = texture2D(texture, v_uv0);\n  gl_FragColor = colorTex * vec4 (1.0, 1.0, 1.0, opacity) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_img_around_merge {\n  float texWidth;\n  float texHeight;\n  float pointSpeed;\n  float lineLength;\n};\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  float msTime = cc_time [0] * 1000.0;\n  vec2 relVec = (v_uv0 - vec2 (0.5, 0.5)) * vec2 (texWidth, texHeight);\n  float relAngle = atan2 (relVec.y, relVec.x);\n  float msCircle = (texWidth * 2.0 + texHeight * 2.0) / pointSpeed;\n  float mergeAngleA = 0.0;\n  float mergeAngleB = 0.0;\n  float rightMS = mod (msTime, msCircle);\n  float rightTagPosX = texWidth / 2.0;\n  float rightMove = pointSpeed * rightMS;\n  float rightTagPosY = rightMove + -texHeight / 2.0 + -lineLength;\n  float rightTagAngleA = atan (rightTagPosY / rightTagPosX);\n  float rightTagAngleB = atan ((rightTagPosY + lineLength) / rightTagPosX);\n  mergeAngleA += step (lineLength, rightMove) * step (rightMove, lineLength + texHeight) * rightTagAngleA;\n  mergeAngleB += step (0.0, rightMove) * step (rightMove, texHeight) * rightTagAngleB;\n  float topMS = mod (msTime - texHeight / pointSpeed, msCircle);\n  float topMove = pointSpeed * topMS;\n  float topTagPosX = -topMove + texWidth / 2.0 + lineLength;\n  float topTagPosY = texHeight / 2.0;\n  float topTagAngleA = atan2 (topTagPosY, topTagPosX);\n  float topTagAngleB = atan2 (topTagPosY, topTagPosX - lineLength);\n  mergeAngleA += step (lineLength, topMove) * step (topMove, lineLength + texWidth) * topTagAngleA;\n  mergeAngleB += step (0.0, topMove) * step (topMove, texWidth) * topTagAngleB;\n  float leftMS = mod (msTime - (texHeight + texWidth) / pointSpeed, msCircle);\n  float leftMove = pointSpeed * leftMS;\n  float leftTagPoxX = -texWidth / 2.0;\n  float leftTagPoxY = -leftMove + texHeight / 2.0 + lineLength;\n  float leftAngleA = atan2 (leftTagPoxY, leftTagPoxX);\n  float leftAngleB = atan2 (leftTagPoxY - lineLength, leftTagPoxX);\n  mergeAngleA += step (lineLength, leftMove) * step (leftMove, lineLength + texHeight) * leftAngleA;\n  mergeAngleB += step (0.0, leftMove) * step (leftMove, texHeight) * leftAngleB;\n  float bottomMS = mod (msTime - (texHeight * 2.0 + texWidth) / pointSpeed, msCircle);\n  float bottomMove = pointSpeed * bottomMS;\n  float bottomTagPoxX = bottomMove - texWidth / 2.0 - lineLength;\n  float bottomTagPosY = -texHeight / 2.0;\n  float bottomTagAngleA = atan2 (bottomTagPosY, bottomTagPoxX);\n  float bottomTagAngleB = atan2 (bottomTagPosY, bottomTagPoxX + lineLength);\n  mergeAngleA += step (lineLength, bottomMove) * step (bottomMove, lineLength + texWidth) * bottomTagAngleA;\n  mergeAngleB += step (0.0, bottomMove) * step (bottomMove, texWidth) * bottomTagAngleB;\n  float isBorderCover = step (mergeAngleB, mergeAngleA);\n  mergeAngleB += isBorderCover * 2.0 * 3.1415;\n  relAngle += isBorderCover * step (relAngle, 0.0) * 2.0 * 3.1415;\n  float opacity = (relAngle - mergeAngleA) / (mergeAngleB - mergeAngleA);\n  opacity = 1.0 - abs (opacity - 0.5) / 0.5;\n  opacity *= step (mergeAngleA, relAngle) * step (relAngle, mergeAngleB);\n  vec4 colorTex = texture (texture, v_uv0);\n  gl_FragColor = colorTex * vec4 (1.0, 1.0, 1.0, opacity) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}