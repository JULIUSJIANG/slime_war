{
  "ver": "1.0.27",
  "uuid": "3c6a465f-e6af-4842-bc5b-80127aec468c",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 texSize;\nfloat Hash31(in vec3 p) {\n  return fract(937.276 * cos(836.826 * p.x + 263.736 * p.y + 374.723 * p.z + 637.839));\n}\nvec4 mainImage (vec2 fragCoord, vec2 iResolution, float iTime) {\n  vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n  float time = iTime * 2.0;\n  vec3 color = vec3(0.0);\n  vec2 p = uv;\n  float freq = fract(643.376 * cos(136.937)) + 1.0;\n  vec2 pos = vec2(0.0, 0.0);\n  pos.y = mod(pos.y + 15.0, 30.0) - 15.0;\n  pos.x *= 0.1 * pos.y + 1.0;\n  p -= 0.2 * pos;\n  float an = mod(atan(p.y, p.x) + 6.2831 / 3.0, 6.2831 / 6.0) - 6.2831 / 3.0;\n  p = vec2(cos(an), sin(an)) * length(p);\n  time = 1.0;\n  float sec = floor(time);\n  float frac = fract(time);\n  float flicker = mix(Hash31(vec3(0.0, 0.0, sec)), Hash31(vec3(0.0, 0.0, sec + 1.0)), frac);\n  float rad = 25.0 + 20.0 * flicker;\n  float br = 250.0 * pow(1.0 / max(10.0, rad * (sqrt(abs(p.x)) + sqrt(abs(p.y))) + 0.9), 2.5);\n  float rand = fract(847.384 * cos(264.836));\n  if (rand > 0.5) color += mix(vec3(br, 0.4 * br, 0.0), vec3(1.0), br);\n  else color += mix(vec3(0.0, 0.0, 0.6 * br), vec3(1.0), br);\n  color *= 0.955 + 0.1 * flicker;\n    return vec4 (color, 1.0);\n}\nvoid main () {\n  vec4 colorTex = texture2D(texture, v_uv0);\n  vec4 colorStar = mainImage (v_uv0 * texSize, texSize, cc_time [0]);\n  gl_FragColor = colorTex * colorStar * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nuniform star {\n  vec2 texSize;\n};\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform star {\n  vec2 texSize;\n};\nfloat Hash31(in vec3 p) {\n  return fract(937.276 * cos(836.826 * p.x + 263.736 * p.y + 374.723 * p.z + 637.839));\n}\nvec4 mainImage (vec2 fragCoord, vec2 iResolution, float iTime) {\n  vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n  float time = iTime * 2.0;\n  vec3 color = vec3(0.0);\n  vec2 p = uv;\n  float freq = fract(643.376 * cos(136.937)) + 1.0;\n  vec2 pos = vec2(0.0, 0.0);\n  pos.y = mod(pos.y + 15.0, 30.0) - 15.0;\n  pos.x *= 0.1 * pos.y + 1.0;\n  p -= 0.2 * pos;\n  float an = mod(atan(p.y, p.x) + 6.2831 / 3.0, 6.2831 / 6.0) - 6.2831 / 3.0;\n  p = vec2(cos(an), sin(an)) * length(p);\n  time = 1.0;\n  float sec = floor(time);\n  float frac = fract(time);\n  float flicker = mix(Hash31(vec3(0.0, 0.0, sec)), Hash31(vec3(0.0, 0.0, sec + 1.0)), frac);\n  float rad = 25.0 + 20.0 * flicker;\n  float br = 250.0 * pow(1.0 / max(10.0, rad * (sqrt(abs(p.x)) + sqrt(abs(p.y))) + 0.9), 2.5);\n  float rand = fract(847.384 * cos(264.836));\n  if (rand > 0.5) color += mix(vec3(br, 0.4 * br, 0.0), vec3(1.0), br);\n  else color += mix(vec3(0.0, 0.0, 0.6 * br), vec3(1.0), br);\n  color *= 0.955 + 0.1 * flicker;\n    return vec4 (color, 1.0);\n}\nvoid main () {\n  vec4 colorTex = texture (texture, v_uv0);\n  vec4 colorStar = mainImage (v_uv0 * texSize, texSize, cc_time [0]);\n  gl_FragColor = colorTex * colorStar * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}