{
  "ver": "1.0.27",
  "uuid": "abc11ecd-c9b6-4de1-acac-f16bc9c80e14",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float textureWidth;\nuniform float textureHeight;\nuniform float isntLine;\nvec4 texelFetch (vec2 texelFetch_uv) {\n  vec2 pos = texelFetch_uv * vec2 (1.0 / textureWidth, 1.0 / textureHeight);\n  if (\n    pos.x < 0.0\n    || 1.0 < pos.x\n    || pos.y < 0.0\n    || 1.0 < pos.y\n  )\n  {\n    return vec4 (0, 0, 0, 0);\n  };\n  return texture2D (texture, pos);\n}\nbool checkEqual (vec4 c1, vec4 c2) {\n  return (\n        abs (c1 [0] * c1 [3] - c2 [0] * c2 [3])\n      + abs (c1 [1] * c1 [3] - c2 [1] * c2 [3])\n      + abs (c1 [2] * c1 [3] - c2 [2] * c2 [3])\n      + abs (c1 [3] - c2 [3])\n  )\n  <=\n  0.05;\n}\nbool cornerAble (vec2 uv, vec2 offsetLeft, vec2 offsetRelative, vec2 offsetRight) {\n  vec4 colorUV = texelFetch(uv);\n  vec4 colorUVLeft = texelFetch(uv + offsetLeft);\n  vec4 colorUVRelative = texelFetch(uv + offsetRelative);\n  vec4 colorUVRight = texelFetch(uv + offsetRight);\n  if (!checkEqual (colorUV, colorUVRelative) || !checkEqual (colorUVLeft, colorUVRight)) {\n    return true;\n  };\n  vec4 avgUVWithRelative = (colorUV + colorUVRelative) * 0.5;\n  vec4 avgLeftWidthRight = (colorUVLeft + colorUVRight) * 0.5;\n  if (checkEqual (avgUVWithRelative, avgLeftWidthRight)) {\n    return true;\n  };\n  float weightLeftWithRight = dot (avgLeftWidthRight.rgb, vec3 (1, 1, 1)) * avgLeftWidthRight.a;\n  float weightUVWithRelative = dot (avgUVWithRelative.rgb, vec3 (1, 1, 1)) * avgUVWithRelative.a;\n  return weightLeftWithRight * isntLine < weightUVWithRelative * isntLine;\n}\nbool diag (inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, float tickness) {\n  vec4 v1 = texelFetch (uv + p1);\n  vec4 v2 = texelFetch (uv + p2);\n  if (checkEqual (v1, v2)) {\n    vec2 dir = p2 - p1;\n    dir = normalize (vec2 (dir.y, -dir.x));\n    vec2 lp = uv - (floor (uv + p1) + 0.5);\n    float shadow = dot (lp, dir);\n    float l = clamp ((tickness - shadow) * 10000.0, 0.0, 1.0);\n    sum = mix (sum, v1, l);\n    return true;\n  };\n  return false;\n}\nvec4 mainImage (in vec2 fragCoord)\n{\n  vec2 ip = fragCoord;\n  vec4 s = texelFetch (ip);\n  if (cornerAble (ip, vec2 (-1, 0), vec2 (-1, 1), vec2 (0, 1))) {\n    if (diag (s, ip, vec2 (-1, 0), vec2 (0, 1), 0.3535)) {\n      diag (s, ip, vec2 (-1, 0), vec2 (1, 1), 0.2236);\n      diag (s, ip, vec2 (-1, -1), vec2 (0, 1), 0.2236);\n    };\n  };\n  if (cornerAble (ip, vec2 (0, 1), vec2 (1, 1), vec2 (1, 0))) {\n    if (diag (s, ip, vec2 (0, 1), vec2 (1, 0), 0.3535)) {\n      diag (s, ip, vec2 (0, 1), vec2 (1, -1), 0.2236);\n      diag (s, ip, vec2 (-1, 1), vec2 (1, 0), 0.2236);\n    };\n  };\n  if (cornerAble (ip, vec2 (1, 0), vec2 (1, -1), vec2 (0, -1))) {\n    if (diag (s, ip, vec2 (1, 0), vec2 (0, -1), 0.3535)) {\n      diag (s, ip, vec2 (1, 0), vec2 (-1, -1), 0.2236);\n      diag (s, ip, vec2 (1, 1), vec2 (0, -1), 0.2236);\n    };\n  };\n  if (cornerAble (ip, vec2 (0, -1), vec2 (-1, -1), vec2 (-1, 0))) {\n    if (diag (s, ip, vec2 (0, -1), vec2 (-1, 0), 0.3535)) {\n       diag (s, ip, vec2 (0, -1), vec2 (-1, 1), 0.2236);\n      diag (s, ip, vec2 (1, -1), vec2 (-1, 0), 0.2236);\n    };\n  };\n  return s;\n}\nvoid main () {\n  gl_FragColor = mainImage (v_uv0 * vec2 (textureWidth, textureHeight)) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_smooth_plus {\n  float textureWidth;\n  float textureHeight;\n  float isntLine;\n};\nvec4 texelFetch (vec2 texelFetch_uv) {\n  vec2 pos = texelFetch_uv * vec2 (1.0 / textureWidth, 1.0 / textureHeight);\n  if (\n    pos.x < 0.0\n    || 1.0 < pos.x\n    || pos.y < 0.0\n    || 1.0 < pos.y\n  )\n  {\n    return vec4 (0, 0, 0, 0);\n  };\n  return texture2D (texture, pos);\n}\nbool checkEqual (vec4 c1, vec4 c2) {\n  return (\n        abs (c1 [0] * c1 [3] - c2 [0] * c2 [3])\n      + abs (c1 [1] * c1 [3] - c2 [1] * c2 [3])\n      + abs (c1 [2] * c1 [3] - c2 [2] * c2 [3])\n      + abs (c1 [3] - c2 [3])\n  )\n  <=\n  0.05;\n}\nbool cornerAble (vec2 uv, vec2 offsetLeft, vec2 offsetRelative, vec2 offsetRight) {\n  vec4 colorUV = texelFetch(uv);\n  vec4 colorUVLeft = texelFetch(uv + offsetLeft);\n  vec4 colorUVRelative = texelFetch(uv + offsetRelative);\n  vec4 colorUVRight = texelFetch(uv + offsetRight);\n  if (!checkEqual (colorUV, colorUVRelative) || !checkEqual (colorUVLeft, colorUVRight)) {\n    return true;\n  };\n  vec4 avgUVWithRelative = (colorUV + colorUVRelative) * 0.5;\n  vec4 avgLeftWidthRight = (colorUVLeft + colorUVRight) * 0.5;\n  if (checkEqual (avgUVWithRelative, avgLeftWidthRight)) {\n    return true;\n  };\n  float weightLeftWithRight = dot (avgLeftWidthRight.rgb, vec3 (1, 1, 1)) * avgLeftWidthRight.a;\n  float weightUVWithRelative = dot (avgUVWithRelative.rgb, vec3 (1, 1, 1)) * avgUVWithRelative.a;\n  return weightLeftWithRight * isntLine < weightUVWithRelative * isntLine;\n}\nbool diag (inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, float tickness) {\n  vec4 v1 = texelFetch (uv + p1);\n  vec4 v2 = texelFetch (uv + p2);\n  if (checkEqual (v1, v2)) {\n    vec2 dir = p2 - p1;\n    dir = normalize (vec2 (dir.y, -dir.x));\n    vec2 lp = uv - (floor (uv + p1) + 0.5);\n    float shadow = dot (lp, dir);\n    float l = clamp ((tickness - shadow) * 10000.0, 0.0, 1.0);\n    sum = mix (sum, v1, l);\n    return true;\n  };\n  return false;\n}\nvec4 mainImage (in vec2 fragCoord)\n{\n  vec2 ip = fragCoord;\n  vec4 s = texelFetch (ip);\n  if (cornerAble (ip, vec2 (-1, 0), vec2 (-1, 1), vec2 (0, 1))) {\n    if (diag (s, ip, vec2 (-1, 0), vec2 (0, 1), 0.3535)) {\n      diag (s, ip, vec2 (-1, 0), vec2 (1, 1), 0.2236);\n      diag (s, ip, vec2 (-1, -1), vec2 (0, 1), 0.2236);\n    };\n  };\n  if (cornerAble (ip, vec2 (0, 1), vec2 (1, 1), vec2 (1, 0))) {\n    if (diag (s, ip, vec2 (0, 1), vec2 (1, 0), 0.3535)) {\n      diag (s, ip, vec2 (0, 1), vec2 (1, -1), 0.2236);\n      diag (s, ip, vec2 (-1, 1), vec2 (1, 0), 0.2236);\n    };\n  };\n  if (cornerAble (ip, vec2 (1, 0), vec2 (1, -1), vec2 (0, -1))) {\n    if (diag (s, ip, vec2 (1, 0), vec2 (0, -1), 0.3535)) {\n      diag (s, ip, vec2 (1, 0), vec2 (-1, -1), 0.2236);\n      diag (s, ip, vec2 (1, 1), vec2 (0, -1), 0.2236);\n    };\n  };\n  if (cornerAble (ip, vec2 (0, -1), vec2 (-1, -1), vec2 (-1, 0))) {\n    if (diag (s, ip, vec2 (0, -1), vec2 (-1, 0), 0.3535)) {\n       diag (s, ip, vec2 (0, -1), vec2 (-1, 1), 0.2236);\n      diag (s, ip, vec2 (1, -1), vec2 (-1, 0), 0.2236);\n    };\n  };\n  return s;\n}\nvoid main () {\n  gl_FragColor = mainImage (v_uv0 * vec2 (textureWidth, textureHeight)) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}