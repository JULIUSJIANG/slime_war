// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        enabledTime: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform eff_fire {
    float enabledTime;
  };

  vec2 hash(vec2 p){
      p = vec2( dot(p,vec2(137.1,373.7)), dot(p,vec2(269.5,183.7)) ); 
      return fract(sin(p)*43758.37); 
  }
  
  float worley(vec2 p){
      vec2 n = floor(p);
      vec2 f = fract(p);
      float r = 1.;
      for(int i=-2;i<=2;i++){
        for(int j=-2;j<=2;j++){
            vec2 o = hash(n+vec2(i,j));
            o = sin(enabledTime/1000.0/2. + hash(n+vec2(i,j))*6.28)*0.5+0.5;//animate
            o += vec2(i,j);
            float D1 = distance(o,f);//Euclidean
            r = min(r,D1);
        }
      }
      return r;
  }
  
  //float logo(vec2 uv);
  void mainImage( out vec4 fragColor, in vec2 uv )
  {
      // fragColor = vec4 (uv.x, uv.y, 0.0, 1.0);
      // return;

      float in_Time = enabledTime/1000.0*1.;
  
      float c = worley(uv + vec2(0.,-in_Time))*0.5;
      
      fragColor = vec4(c);
      c += worley(uv*2.+vec2(sin(in_Time*2.)*0.5,-in_Time*6.))*0.5;//2 Layers worley
      fragColor = vec4(c);
      c += (-uv.y-0.3)*0.6;//y mask
      fragColor = vec4(c);
      
      vec2 p = uv;
      p.x *=1.5+smoothstep(-0.3,1.,uv.y)*1.5;
      
      float m = smoothstep(1.,.5,length(p));//circle mask
      
      float c0 = smoothstep(.4,.6,m*c*3.);//out fire
      fragColor = vec4(c0);
      float c1 = smoothstep(.5,.52,m*c*2.);//mid fire
      fragColor = vec4(c1);
      float c2 = smoothstep(.5,.52,m*c*1.2*(-uv.y+0.3));//inner fire
      fragColor = vec4(c2);
      float c3 = pow(worley(uv*6.+vec2(sin(in_Time*4.)*1.,-in_Time*16.)),8.);
            c3 = smoothstep(.98,1.,c3)*m;//sparkle
  
  
      vec3 col =vec3(1.,.4,.2)*c3;//sparkle
      col = mix(col,vec3(.95,.1,.2)*(uv.y+.8),c0);//out
      col = mix(col,mix(vec3(.9,.3,.2),vec3(.9,.6,.2),-uv.y),c1);//mid
      col = mix(col,vec3(.9,.8,.2),c2);//inner

      // Output to screen
      float avgColor = dot(col, vec3(1)) / 3.0;
      fragColor = vec4(col, avgColor * 2.0);
  }

  void main () {
    vec4 colorFire = vec4 (0);
    mainImage (colorFire, (v_uv0 - vec2 (0.5, 0.5)) * 2.0);
    gl_FragColor = colorFire;
    return;

    vec4 colorTex = texture (texture, v_uv0);
    colorTex *= v_color;
    gl_FragColor = colorTex.rgba;
  }
}%
