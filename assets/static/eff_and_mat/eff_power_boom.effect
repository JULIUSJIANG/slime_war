// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        enabledTime: { value: 0.0 }
        loopTime: { value: 200.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform eff_power_boom {
    float enabledTime;
    float loopTime;
  };

  void main () {
    float rateTime = clamp (mod (enabledTime, loopTime) / loopTime, 0.0, 1.0);
    rateTime = 1.0 - abs (rateTime - 0.5) / 0.5;

    vec2 rel = v_uv0 - vec2 (0.5);
    float distance = sqrt (rel.x * rel.x + rel.y * rel.y);
    float opacity = distance / 0.5;
    opacity = 1.0 - opacity;
    opacity *= step (distance, 0.5);

    float opacitint = 1.0 - opacity;
    // 缩小外边界
    opacitint = pow (opacitint, 2.0);
    // 减少边界渐变
    opacitint = opacitint * 1.3;
    opacitint = clamp (opacitint, 0.0, 1.0);
    opacitint *= rateTime;

    // 外部增厚
    opacity = pow (opacity, 0.5);
    // 减少渐变
    opacity *= 2.0;
    opacity = clamp (opacity, 0.0, 1.0);

    // 纹理取色
    vec4 colorTex = texture (texture, v_uv0);

    // 着色取色
    vec4 colorTint = vec4 (1) * (1.0 - opacitint) + v_color * opacitint;

    colorTex.a *= opacity;
    colorTex *= colorTint;
    gl_FragColor = colorTex.rgba;
  }
}%
