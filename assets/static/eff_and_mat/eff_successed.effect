// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        pSplitUint: { value: 0.1745 } // 2 * Math.PI / 36
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  uniform eff_successed {
    float pSplitUint;
  };

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  float atan2 (float y, float x) {
    return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;
  }

  uniform eff_successed {
    float pSplitUint;
  };

  void main () {
    vec2 rel = (v_uv0 - vec2 (0.5, 0.5));
    float distance = sqrt (dot (rel, rel));
    float angle = atan2 (rel.y, rel.x);
    angle += 3.1415 * 2.0;
    angle += 3.1415 * 2.0 / 15.0 * cc_time [0];

    float inCircle = mod (angle, pSplitUint * 2.0);
    float opacity = step (inCircle, pSplitUint);

    float opacityDistance = 1.0 - distance / 0.5;
    opacityDistance = clamp (opacityDistance, 0.0, 1.0);
    opacityDistance *= opacityDistance;

    vec4 colorTex = texture (texture, v_uv0);
    gl_FragColor = colorTex * v_color * vec4 (1.0, 1.0, 1.0, opacity * opacityDistance);
  }
}%
