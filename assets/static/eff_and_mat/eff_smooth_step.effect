// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

/*
效果：平滑
注意事项：即使用 step 替换了所有的 if，性能仍然不理想
*/

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        textureWidth: { value: 1.0 }
        textureHeight: { value: 1.0 }
        darkFirst: { value: 1.0 }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  // 接收外部变量
  uniform EffSmoothPro {
    // 宽度
    float textureWidth;
    // 高度
    float textureHeight;
    // 不是给线用的
    float darkFirst;
  };

  // 俩颜色距离在该值以内的话，认为是等价的
  #define THRESHOLD 0.05

  // 抗锯齿缩放，值越小越模糊
  #define AA_SCALE 10000.0

  // 判断用的厚度
  #define TICKNESS_1_1 0.3535

  // 判断通过后采纳的厚度
  #define TICKNESS_1_2 0.2236

  // 通过像素位置对纹理进行取样
  vec4 texelFetch (vec2 texelFetch_uv) {
    vec2 pos = texelFetch_uv * vec2 (1.0 / textureWidth, 1.0 / textureHeight);
    float none = step (1.0, step (pos.x, 0.0) + step (1.0, pos.x) + step (pos.y, 0.0) + step (1.0, pos.y));
    return mix (texture2D (texture, pos), vec4 (0, 0, 0, 0), none);
  }

  // 判断颜色是否一致
  float checkEqual (vec4 c1, vec4 c2) {
    // 各分量差值和小于阈值
    return step (
          abs (c1 [0] * c1 [3] - c2 [0] * c2 [3]) 
        + abs (c1 [1] * c1 [3] - c2 [1] * c2 [3]) 
        + abs (c1 [2] * c1 [3] - c2 [2] * c2 [3])
        + abs (c1 [3] - c2 [3]),

        THRESHOLD
    );
  } 

  // 该角是否发生平滑
  float cornerAble (vec2 uv, vec2 offsetLeft, vec2 offsetRelative, vec2 offsetRight) {
    return 1.0;

    vec4 colorUV = texelFetch(uv);
    vec4 colorUVLeft = texelFetch(uv + offsetLeft);
    vec4 colorUVRelative = texelFetch(uv + offsetRelative);
    vec4 colorUVRight = texelFetch(uv + offsetRight);

    // 存在其中一组不造成同类别颜色，那么没问题
    float judge1 = step (1.0, (1.0 - checkEqual (colorUV, colorUVRelative)) + (1.0 - checkEqual (colorUVLeft, colorUVRight)));
 
    // 取平均颜色作为比较基准
    vec4 avgUVWithRelative = (colorUV + colorUVRelative) * 0.5;
    vec4 avgLeftWidthRight = (colorUVLeft + colorUVRight) * 0.5;

    // 4 个位置颜色同类别，那么没问题
    float judge2 = checkEqual (avgUVWithRelative, avgLeftWidthRight);

    // 谁高亮，谁作出妥协
    float weightLeftWithRight = dot (avgLeftWidthRight.rgb, vec3 (1, 1, 1)) * avgLeftWidthRight.a;
    float weightUVWithRelative = dot (avgUVWithRelative.rgb, vec3 (1, 1, 1)) * avgUVWithRelative.a;
    float judge3 = step (weightLeftWithRight * darkFirst, weightUVWithRelative * darkFirst);
    return step (1.0, judge1 + judge2 + judge3);
  }

  // 如果在阈值内，绘制连接 2 个像素的对角线
  float diag (inout vec4 sum, vec2 uv, vec2 p1, vec2 p2, float tickness, float judgePrevious) {
    // 采样 p1
    vec4 v1 = texelFetch (uv + p1);
    // 采样 p2
    vec4 v2 = texelFetch (uv + p2);

    float judgeEqual = checkEqual (v1, v2) * judgePrevious;
    // 向量：p1 -> p2
    vec2 dir = p2 - p1;
    // 向量：p1 -> p2 顺时针旋转 90 度
    dir = normalize (vec2 (dir.y, -dir.x));
    // 向量：p1 像素点中心 -> uv
    vec2 lp = uv - (floor (uv + p1) + 0.5);
    // lp 在 dir 上的投影，取值 0 - 1.4142135623730951；
    float shadow = dot (lp, dir);
    // 越靠内权重 l 越大
    float l = clamp ((tickness - shadow) * AA_SCALE, 0.0, 1.0);
    // 根据权重，进行取色
    sum = mix (sum, v1, l * judgeEqual);

    return judgeEqual;
  }

  // 核心函数
  vec4 mainImage (in vec2 fragCoord)
  {
    // 采样位置
    vec2 ip = fragCoord;

    // 以最近像素作为背景
    vec4 s = texelFetch (ip);

    // 如果左上许可
    float judgeLT = cornerAble (ip, vec2 (-1, 0), vec2 (-1, 1), vec2 (0, 1));
    // 如果左、上连接
    float judgeLTDiag = diag (s, ip, vec2 (-1, 0), vec2 (0, 1), TICKNESS_1_1, judgeLT);
    // 尝试连接左、右上
    diag (s, ip, vec2 (-1, 0), vec2 (1, 1), TICKNESS_1_2, judgeLTDiag);
    // 尝试连接左下、上
    diag (s, ip, vec2 (-1, -1), vec2 (0, 1), TICKNESS_1_2, judgeLTDiag);
    
    // 如果右上许可
    float judgeRT = cornerAble (ip, vec2 (0, 1), vec2 (1, 1), vec2 (1, 0));
    // 如果上、右连接
    float judgeRTDiag = diag (s, ip, vec2 (0, 1), vec2 (1, 0), TICKNESS_1_1, judgeRT);
    // 尝试连接右、右下
    diag (s, ip, vec2 (0, 1), vec2 (1, -1), TICKNESS_1_2, judgeRTDiag);
    // 尝试连接左上、右
    diag (s, ip, vec2 (-1, 1), vec2 (1, 0), TICKNESS_1_2, judgeRTDiag);

    // 如果右下许可
    float judgeRB = cornerAble (ip, vec2 (1, 0), vec2 (1, -1), vec2 (0, -1));
    // 如果右、下连接
    float judgeRBDiag = diag (s, ip, vec2 (1, 0), vec2 (0, -1), TICKNESS_1_1, judgeRB);
    // 尝试连接右、左上
    diag (s, ip, vec2 (1, 0), vec2 (-1, -1), TICKNESS_1_2, judgeRBDiag);
    // 尝试连接右上、左
    diag (s, ip, vec2 (1, 1), vec2 (0, -1), TICKNESS_1_2, judgeRBDiag);
    
    // 如果左下许可
    float judgeLB = cornerAble (ip, vec2 (0, -1), vec2 (-1, -1), vec2 (-1, 0));
    // 如果下、左连接
    float judgeLBDiag = diag (s, ip, vec2 (0, -1), vec2 (-1, 0), TICKNESS_1_1, judgeLB);
    // 尝试连接下、左上
    diag (s, ip, vec2 (0, -1), vec2 (-1, 1), TICKNESS_1_2, judgeLBDiag);
    // 尝试连接右下、左
    diag (s, ip, vec2 (1, -1), vec2 (-1, 0), TICKNESS_1_2, judgeLBDiag);

    return s;
    return s * 0.5 + texelFetch (ip) * 0.5;
  }

  void main () {
    gl_FragColor = mainImage (v_uv0 * vec2 (textureWidth, textureHeight)) * v_color;
  }

}%