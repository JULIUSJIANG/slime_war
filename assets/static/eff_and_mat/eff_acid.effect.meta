{
  "ver": "1.0.27",
  "uuid": "2047f5cf-019b-4817-a1e1-d964b6278010",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float countMul;\nuniform float enabledTime;\nuniform float loopTime;\nuniform float offsetRate;\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  vec2 rel = (v_uv0 - vec2 (0.5));\n  float distance = sqrt (dot (rel, rel));\n  float circle = enabledTime / loopTime * 3.1415 * 2.0;\n  float offset = sin (circle);\n  float angle = atan2 (rel.y, rel.x);\n  float transY = cos (countMul * angle);\n  float finalY = 0.5 * (transY + 1.0) * 0.5;\n  float rateY = (sin (angle + 3.1415 * 2.0 + enabledTime / loopTime * 3.1415 * 2.0) + 1.0) * 0.5 * offsetRate + (1.0 - offsetRate);\n  finalY *= rateY;\n  float opacityY = step (distance, finalY);\n  float opacityBorder = distance / finalY;\n  opacityBorder = pow (opacityBorder, 4.0);\n  vec4 colorTex = texture2D(texture, v_uv0);\n  colorTex.a *= opacityY;\n  colorTex *= mix (v_color, vec4 (1), opacityBorder);\n  gl_FragColor = colorTex.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_water_ball {\n  float countMul;\n  float enabledTime;\n  float loopTime;\n  float offsetRate;\n};\nfloat atan2 (float y, float x) {\n  return atan (y / x) + step (x, 0.0) * step (0.0, y) * 3.1415 - step (x, 0.0) * step (y, 0.0) * 3.1415;\n}\nvoid main () {\n  vec2 rel = (v_uv0 - vec2 (0.5));\n  float distance = sqrt (dot (rel, rel));\n  float circle = enabledTime / loopTime * 3.1415 * 2.0;\n  float offset = sin (circle);\n  float angle = atan2 (rel.y, rel.x);\n  float transY = cos (countMul * angle);\n  float finalY = 0.5 * (transY + 1.0) * 0.5;\n  float rateY = (sin (angle + 3.1415 * 2.0 + enabledTime / loopTime * 3.1415 * 2.0) + 1.0) * 0.5 * offsetRate + (1.0 - offsetRate);\n  finalY *= rateY;\n  float opacityY = step (distance, finalY);\n  float opacityBorder = distance / finalY;\n  opacityBorder = pow (opacityBorder, 4.0);\n  vec4 colorTex = texture (texture, v_uv0);\n  colorTex.a *= opacityY;\n  colorTex *= mix (v_color, vec4 (1), opacityBorder);\n  gl_FragColor = colorTex.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}