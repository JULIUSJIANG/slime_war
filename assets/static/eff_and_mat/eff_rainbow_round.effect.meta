{
  "ver": "1.0.27",
  "uuid": "8a22c412-835b-4b2c-962e-c6d6e084f5c7",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 texSize;\nvec4 mainImage (vec2 fragCoord, vec2 iResolution, float iTime)\n{\n  vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  float tau = 6.283185307;\n  float a = atan(p.x,p.y);\n  float r = length(p)*0.75;\n  vec2 uv = vec2(a/tau,r);\n  float xCol = (uv.x - (iTime / 3.0)) * 3.0;\n  xCol = mod(xCol, 3.0);\n  vec3 horColour = vec3(0.25, 0.25, 0.25);\n  float jXCol1 = step (xCol, 1.0);\n  float j1XCol2 = step (1.0, xCol) * step (xCol, 2.0);\n  float j2XCol = step (2.0, xCol);\n  horColour.r += (1.0 - xCol) * jXCol1;\n  horColour.g += xCol * jXCol1;\n  xCol -= 1.0 * j1XCol2;\n  horColour.g += (1.0 - xCol) * j1XCol2;\n  horColour.b += xCol * j1XCol2;\n  xCol -= 2.0 * j2XCol;\n  horColour.b += (1.0 - xCol) * j2XCol;\n  horColour.r += xCol * j2XCol;\n  uv = (2.0 * uv) - 1.0;\n  float beamWidth = 1.2 * abs(1.0 / (30.0 * uv.y));\n  vec3 horBeam = vec3(beamWidth);\n  return vec4((( horBeam) * horColour), 1.0);\n}\nvoid main () {\n  vec2 rel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (dot (rel, rel));\n  float opacity = 1.0 - distance / 0.5;\n  opacity = clamp (opacity, 0.0, 1.0);\n  opacity = sqrt (opacity);\n  opacity = sqrt (opacity);\n  vec4 colorTex = texture2D(texture, v_uv0);\n  gl_FragColor = colorTex * mainImage (v_uv0 * texSize, texSize, cc_time [0]) * vec4 (1.0, 1.0, 1.0, opacity) * v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nuniform eff_rainbow_round {\n  vec2 texSize;\n};\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_rainbow_round {\n  vec2 texSize;\n};\nvec4 mainImage (vec2 fragCoord, vec2 iResolution, float iTime)\n{\n  vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  float tau = 6.283185307;\n  float a = atan(p.x,p.y);\n  float r = length(p)*0.75;\n  vec2 uv = vec2(a/tau,r);\n  float xCol = (uv.x - (iTime / 3.0)) * 3.0;\n  xCol = mod(xCol, 3.0);\n  vec3 horColour = vec3(0.25, 0.25, 0.25);\n  float jXCol1 = step (xCol, 1.0);\n  float j1XCol2 = step (1.0, xCol) * step (xCol, 2.0);\n  float j2XCol = step (2.0, xCol);\n  horColour.r += (1.0 - xCol) * jXCol1;\n  horColour.g += xCol * jXCol1;\n  xCol -= 1.0 * j1XCol2;\n  horColour.g += (1.0 - xCol) * j1XCol2;\n  horColour.b += xCol * j1XCol2;\n  xCol -= 2.0 * j2XCol;\n  horColour.b += (1.0 - xCol) * j2XCol;\n  horColour.r += xCol * j2XCol;\n  uv = (2.0 * uv) - 1.0;\n  float beamWidth = 1.2 * abs(1.0 / (30.0 * uv.y));\n  vec3 horBeam = vec3(beamWidth);\n  return vec4((( horBeam) * horColour), 1.0);\n}\nvoid main () {\n  vec2 rel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = sqrt (dot (rel, rel));\n  float opacity = 1.0 - distance / 0.5;\n  opacity = clamp (opacity, 0.0, 1.0);\n  opacity = sqrt (opacity);\n  opacity = sqrt (opacity);\n  vec4 colorTex = texture (texture, v_uv0);\n  gl_FragColor = colorTex * mainImage (v_uv0 * texSize, texSize, cc_time [0]) * vec4 (1.0, 1.0, 1.0, opacity) * v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}