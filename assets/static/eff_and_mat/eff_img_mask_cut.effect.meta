{
  "ver": "1.0.27",
  "uuid": "f44e7afb-4a12-4f39-a818-0a8f9cc74f3b",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform float textureWidth;\nuniform float textureHeight;\nuniform float cutX;\nuniform float cutY;\nuniform float cutWidth;\nuniform float cutHeight;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = vec2 ((cutX + a_uv0.x * cutWidth) / textureWidth, (cutY + a_uv0.y * cutHeight) / textureHeight);\n  v_uv1 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform float cutWidth;\nuniform float cutHeight;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvoid main () {\n  float cutSize = 6.0;\n  float xGrid = cutSize;\n  if (v_uv1.x < cutSize / cutWidth) {\n      xGrid = v_uv1.x * cutWidth;\n  };\n  if (1.0 - cutSize / cutWidth < v_uv1.x) {\n      xGrid = (1.0 - v_uv1.x) * cutWidth;\n  };\n  float yGrid = cutSize;\n  if (v_uv1.y < cutSize / cutHeight) {\n      yGrid = v_uv1.y * cutHeight;\n  };\n  if (1.0 - cutSize / cutHeight < v_uv1.y) {\n      yGrid = (1.0 - v_uv1.y) * cutHeight;\n  };\n  if (xGrid + yGrid < cutSize) {\n      gl_FragColor = vec4 (0, 0, 0, 0);\n  }\n  else {\n      vec4 o = vec4 (1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n      o *= v_color;\n      gl_FragColor = o.rgba;\n  };\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform eff_img_mask_cut {\n  float textureWidth;\n  float textureHeight;\n  float cutX;\n  float cutY;\n  float cutWidth;\n  float cutHeight;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec2 v_uv1;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = vec2 ((cutX + a_uv0.x * cutWidth) / textureWidth, (cutY + a_uv0.y * cutHeight) / textureHeight);\n  v_uv1 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform eff_img_mask_cut {\n  float textureWidth;\n  float textureHeight;\n  float cutX;\n  float cutY;\n  float cutWidth;\n  float cutHeight;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvoid main () {\n  float cutSize = 6.0;\n  float xGrid = cutSize;\n  if (v_uv1.x < cutSize / cutWidth) {\n      xGrid = v_uv1.x * cutWidth;\n  };\n  if (1.0 - cutSize / cutWidth < v_uv1.x) {\n      xGrid = (1.0 - v_uv1.x) * cutWidth;\n  };\n  float yGrid = cutSize;\n  if (v_uv1.y < cutSize / cutHeight) {\n      yGrid = v_uv1.y * cutHeight;\n  };\n  if (1.0 - cutSize / cutHeight < v_uv1.y) {\n      yGrid = (1.0 - v_uv1.y) * cutHeight;\n  };\n  if (xGrid + yGrid < cutSize) {\n      gl_FragColor = vec4 (0, 0, 0, 0);\n  }\n  else {\n      vec4 o = vec4 (1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n      o *= v_color;\n      gl_FragColor = o.rgba;\n  };\n}"
      }
    }
  ],
  "subMetas": {}
}