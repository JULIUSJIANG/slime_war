// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        texSize: { value: [100, 100] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  uniform eff_rainbow_round {
    vec2 texSize;
  };

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform eff_rainbow_round {
    vec2 texSize;
  };

  vec4 mainImage (vec2 fragCoord, vec2 iResolution, float iTime)
  {
  	vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;
    float tau = 6.283185307;
    float a = atan(p.x,p.y);
    float r = length(p)*0.75;
    vec2 uv = vec2(a/tau,r);
  
  	//get the color
  	float xCol = (uv.x - (iTime / 3.0)) * 3.0;
  	xCol = mod(xCol, 3.0);
  	vec3 horColour = vec3(0.25, 0.25, 0.25);
  
    float jXCol1 = step (xCol, 1.0);
    float j1XCol2 = step (1.0, xCol) * step (xCol, 2.0);
    float j2XCol = step (2.0, xCol);

    horColour.r += (1.0 - xCol) * jXCol1;
  	horColour.g += xCol * jXCol1;

    xCol -= 1.0 * j1XCol2;
  	horColour.g += (1.0 - xCol) * j1XCol2;
  	horColour.b += xCol * j1XCol2;

    xCol -= 2.0 * j2XCol;
  	horColour.b += (1.0 - xCol) * j2XCol;
  	horColour.r += xCol * j2XCol;
  
  	uv = (2.0 * uv) - 1.0;
  	float beamWidth = 1.2 * abs(1.0 / (30.0 * uv.y));
  	vec3 horBeam = vec3(beamWidth);
  	return vec4((( horBeam) * horColour), 1.0);
  }

  void main () {
    vec2 rel = v_uv0 - vec2 (0.5, 0.5);
    float distance = sqrt (dot (rel, rel));
    float opacity = 1.0 - distance / 0.5;
    opacity = clamp (opacity, 0.0, 1.0);
    opacity = sqrt (opacity);
    opacity = sqrt (opacity);

    vec4 colorTex = texture (texture, v_uv0);
    gl_FragColor = colorTex * mainImage (v_uv0 * texSize, texSize, cc_time [0]) * vec4 (1.0, 1.0, 1.0, opacity) * v_color;
  }
}%
