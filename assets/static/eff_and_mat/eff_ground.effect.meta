{
  "ver": "1.0.27",
  "uuid": "2ccd65fa-7895-4bb1-8952-620156a69be0",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n  uniform sampler2D texNoise;\nuniform float enabledTime;\nuniform float totalTime;\nvoid main () {\n  float opacityMS = 1.0 - abs (enabledTime / totalTime - 0.5) / 0.5;\n  opacityMS = pow (opacityMS, 0.5);\n  float yMaxScale = 1.0 - abs (v_uv0.x - 0.5) / 0.5;\n  yMaxScale = pow (yMaxScale, 0.5);\n  vec4 colorNoise = texture2D(texNoise, vec2 (v_uv0.x, mod (enabledTime / totalTime, 1.0)));\n  float border = yMaxScale * pow (colorNoise.r, 0.5);\n  float opacityBorder = 1.0 - v_uv0.y / border;\n  float opacityTint = opacityBorder;\n  opacityTint = clamp (opacityTint, 0.0, 1.0);\n  opacityTint = pow (opacityTint, 2.0);\n  opacityBorder *= 2.0;\n  opacityBorder = clamp (opacityBorder, 0.0, 1.0);\n  vec4 colorTex = texture2D(texture, v_uv0);\n  colorTex.a *= opacityBorder;\n  colorTex.a *= opacityMS;\n  colorTex *= (1.0 - opacityTint) * v_color + opacityTint* vec4 (1);\n  gl_FragColor = colorTex.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\n  uniform sampler2D texNoise;\nuniform eff_ground {\n  float enabledTime;\n  float totalTime;\n  float msScale;\n};\nvoid main () {\n  float opacityMS = 1.0 - abs (enabledTime / totalTime - 0.5) / 0.5;\n  opacityMS = pow (opacityMS, 0.5);\n  float yMaxScale = 1.0 - abs (v_uv0.x - 0.5) / 0.5;\n  yMaxScale = pow (yMaxScale, 0.5);\n  vec4 colorNoise = texture (texNoise, vec2 (v_uv0.x, mod (enabledTime / totalTime, 1.0)));\n  float border = yMaxScale * pow (colorNoise.r, 0.5);\n  float opacityBorder = 1.0 - v_uv0.y / border;\n  float opacityTint = opacityBorder;\n  opacityTint = clamp (opacityTint, 0.0, 1.0);\n  opacityTint = pow (opacityTint, 2.0);\n  opacityBorder *= 2.0;\n  opacityBorder = clamp (opacityBorder, 0.0, 1.0);\n  vec4 colorTex = texture (texture, v_uv0);\n  colorTex.a *= opacityBorder;\n  colorTex.a *= opacityMS;\n  colorTex *= (1.0 - opacityTint) * v_color + opacityTint* vec4 (1);\n  gl_FragColor = colorTex.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}