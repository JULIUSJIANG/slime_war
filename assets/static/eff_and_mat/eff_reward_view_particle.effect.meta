{
  "ver": "1.0.27",
  "uuid": "4ba46399-0f45-4d29-8f55-32f4179edac6",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 colorInner;\nuniform vec4 colorOuter;\nvoid main () {\n  vec4 colorTex = texture2D(texture, v_uv0);\n  vec2 vecRel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = length (vecRel);\n  float rate = clamp (1.0 - distance / 0.5, 0.0, 1.0);\n  float opacity = rate;\n  opacity = pow (opacity, 4.0);\n  opacity *= 4.0;\n  opacity = clamp (opacity, 0.0, 1.0);\n  float rateInner = rate;\n  rateInner = pow (rateInner, 1.0);\n  vec4 colorTint = rateInner * colorInner + (1.0 - rateInner) * colorOuter;\n  gl_FragColor = colorTex * v_color * vec4 (1.0, 1.0, 1.0, opacity) * colorTint;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform eff_reward_view_particle {\n  vec4 colorInner;\n  vec4 colorOuter;\n};\nvoid main () {\n  vec4 colorTex = texture (texture, v_uv0);\n  vec2 vecRel = v_uv0 - vec2 (0.5, 0.5);\n  float distance = length (vecRel);\n  float rate = clamp (1.0 - distance / 0.5, 0.0, 1.0);\n  float opacity = rate;\n  opacity = pow (opacity, 4.0);\n  opacity *= 4.0;\n  opacity = clamp (opacity, 0.0, 1.0);\n  float rateInner = rate;\n  rateInner = pow (rateInner, 1.0);\n  vec4 colorTint = rateInner * colorInner + (1.0 - rateInner) * colorOuter;\n  gl_FragColor = colorTex * v_color * vec4 (1.0, 1.0, 1.0, opacity) * colorTint;\n}"
      }
    }
  ],
  "subMetas": {}
}